
gun_STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006700  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d60  20000060  08006760  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dc0  08006760  00008dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3a9  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003929  00000000  00000000  00025439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00028d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001408  00000000  00000000  0002a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a1c  00000000  00000000  0002bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd3c  00000000  00000000  0002f504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8433  00000000  00000000  0004b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a4  00000000  00000000  000f36b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000fa75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006678 	.word	0x08006678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006678 	.word	0x08006678

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fdb4 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f822 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fa3a 	bl	8000990 <MX_GPIO_Init>
  MX_ADC1_Init();
 800051c:	f000 f886 	bl	800062c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000520:	f000 f8d6 	bl	80006d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000524:	f000 f902 	bl	800072c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000528:	f000 f936 	bl	8000798 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f9dc 	bl	80008e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000530:	f000 fa04 	bl	800093c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f003 fa00 	bl	8003938 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <main+0x44>)
 800053a:	2100      	movs	r1, #0
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <main+0x48>)
 800053e:	f003 fa45 	bl	80039cc <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <main+0x4c>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f003 fa1a 	bl	8003980 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x40>
 8000550:	080066b4 	.word	0x080066b4
 8000554:	08000a91 	.word	0x08000a91
 8000558:	20000248 	.word	0x20000248

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f005 ff94 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a26      	ldr	r2, [pc, #152]	@ (8000624 <SystemClock_Config+0xc8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <SystemClock_Config+0xcc>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005cc:	2319      	movs	r3, #25
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80005d0:	23c8      	movs	r3, #200	@ 0xc8
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fbc3 	bl	8001d6c <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 fa6a 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2103      	movs	r1, #3
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fe25 	bl	800225c <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000618:	f000 fa54 	bl	8000ac4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <MX_ADC1_Init+0x9c>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000646:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800064a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000652:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800066e:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <MX_ADC1_Init+0xa0>)
 8000670:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800067a:	2201      	movs	r2, #1
 800067c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_ADC1_Init+0x98>)
 8000688:	2201      	movs	r2, #1
 800068a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_ADC1_Init+0x98>)
 800068e:	f000 fd37 	bl	8001100 <HAL_ADC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 fa14 	bl	8000ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800069c:	2301      	movs	r3, #1
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_ADC1_Init+0x98>)
 80006ae:	f000 fd6b 	bl	8001188 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b8:	f000 fa04 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f001 f9e9 	bl	8001ae4 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f9d4 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000c4 	.word	0x200000c4
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f001 ff7f 	bl	8002680 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f99c 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000118 	.word	0x20000118
 8000794:	40013000 	.word	0x40013000

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b092      	sub	sp, #72	@ 0x48
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 fe68 	bl	8006498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b45      	ldr	r3, [pc, #276]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007ca:	4a46      	ldr	r2, [pc, #280]	@ (80008e4 <MX_TIM1_Init+0x14c>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ce:	4b44      	ldr	r3, [pc, #272]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b42      	ldr	r3, [pc, #264]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007da:	4b41      	ldr	r3, [pc, #260]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b3f      	ldr	r3, [pc, #252]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e8:	4b3d      	ldr	r3, [pc, #244]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b3c      	ldr	r3, [pc, #240]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f4:	483a      	ldr	r0, [pc, #232]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80007f6:	f002 f887 	bl	8002908 <HAL_TIM_PWM_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000800:	f000 f960 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000810:	4619      	mov	r1, r3
 8000812:	4833      	ldr	r0, [pc, #204]	@ (80008e0 <MX_TIM1_Init+0x148>)
 8000814:	f002 fcb4 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800081e:	f000 f951 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2360      	movs	r3, #96	@ 0x60
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4826      	ldr	r0, [pc, #152]	@ (80008e0 <MX_TIM1_Init+0x148>)
 8000848:	f002 f99e 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000852:	f000 f937 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	2204      	movs	r2, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4820      	ldr	r0, [pc, #128]	@ (80008e0 <MX_TIM1_Init+0x148>)
 8000860:	f002 f992 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800086a:	f000 f92b 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	2208      	movs	r2, #8
 8000874:	4619      	mov	r1, r3
 8000876:	481a      	ldr	r0, [pc, #104]	@ (80008e0 <MX_TIM1_Init+0x148>)
 8000878:	f002 f986 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000882:	f000 f91f 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088a:	220c      	movs	r2, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	@ (80008e0 <MX_TIM1_Init+0x148>)
 8000890:	f002 f97a 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800089a:	f000 f913 	bl	8000ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80008c2:	f002 fccb 	bl	800325c <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80008cc:	f000 f8fa 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <MX_TIM1_Init+0x148>)
 80008d2:	f000 fa25 	bl	8000d20 <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3748      	adds	r7, #72	@ 0x48
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000170 	.word	0x20000170
 80008e4:	40010000 	.word	0x40010000

080008e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <MX_USART1_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USART1_UART_Init+0x4c>)
 8000920:	f002 fd02 	bl	8003328 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f8cb 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200001b8 	.word	0x200001b8
 8000938:	40011000 	.word	0x40011000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f002 fcd8 	bl	8003328 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f8a1 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000200 	.word	0x20000200
 800098c:	40004400 	.word	0x40004400

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a34      	ldr	r2, [pc, #208]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a2d      	ldr	r2, [pc, #180]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a26      	ldr	r2, [pc, #152]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_GPIO_Init+0xf0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a1c:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <MX_GPIO_Init+0xf4>)
 8000a1e:	f001 f847 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <MX_GPIO_Init+0xf4>)
 8000a3c:	f000 feb4 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a40:	2301      	movs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <MX_GPIO_Init+0xf8>)
 8000a56:	f000 fea7 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000a5a:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_GPIO_Init+0xfc>)
 8000a72:	f000 fe99 	bl	80017a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400

08000a90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f003 f829 	bl	8003af0 <osDelay>
 8000a9e:	e7fb      	b.n	8000a98 <StartDefaultTask+0x8>

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ab2:	f000 fb05 	bl	80010c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40014800 	.word	0x40014800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_MspInit+0x54>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <HAL_MspInit+0x54>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_MspInit+0x54>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_MspInit+0x54>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_MspInit+0x54>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <HAL_MspInit+0x54>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	210f      	movs	r1, #15
 8000b12:	f06f 0001 	mvn.w	r0, #1
 8000b16:	f000 fe1d 	bl	8001754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <HAL_ADC_MspInit+0x7c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d127      	bne.n	8000b9a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_ADC_MspInit+0x80>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <HAL_ADC_MspInit+0x84>)
 8000b96:	f000 fe07 	bl	80017a8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40012000 	.word	0x40012000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_I2C_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bee:	23c0      	movs	r3, #192	@ 0xc0
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <HAL_I2C_MspInit+0x8c>)
 8000c0a:	f000 fdcd 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23e0      	movs	r3, #224	@ 0xe0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000cb6:	f000 fd77 	bl	80017a8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_TIM_PWM_MspInit+0x48>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d115      	bne.n	8000d0e <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210f      	movs	r1, #15
 8000d02:	201a      	movs	r0, #26
 8000d04:	f000 fd26 	bl	8001754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d08:	201a      	movs	r0, #26
 8000d0a:	f000 fd3f 	bl	800178c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <HAL_TIM_MspPostInit+0x68>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d11e      	bne.n	8000d80 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	@ (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000d5e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <HAL_TIM_MspPostInit+0x70>)
 8000d7c:	f000 fd14 	bl	80017a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	@ 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a41      	ldr	r2, [pc, #260]	@ (8000eb8 <HAL_UART_MspInit+0x124>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d14b      	bne.n	8000e4e <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	4b40      	ldr	r3, [pc, #256]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	4b39      	ldr	r3, [pc, #228]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a38      	ldr	r2, [pc, #224]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b36      	ldr	r3, [pc, #216]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b32      	ldr	r3, [pc, #200]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a31      	ldr	r2, [pc, #196]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4826      	ldr	r0, [pc, #152]	@ (8000ec0 <HAL_UART_MspInit+0x12c>)
 8000e28:	f000 fcbe 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	481f      	ldr	r0, [pc, #124]	@ (8000ec4 <HAL_UART_MspInit+0x130>)
 8000e48:	f000 fcae 	bl	80017a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4c:	e030      	b.n	8000eb0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_UART_MspInit+0x134>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d12b      	bne.n	8000eb0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HAL_UART_MspInit+0x128>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e90:	230c      	movs	r3, #12
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <HAL_UART_MspInit+0x12c>)
 8000eac:	f000 fc7c 	bl	80017a8 <HAL_GPIO_Init>
}
 8000eb0:	bf00      	nop
 8000eb2:	3730      	adds	r7, #48	@ 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40004400 	.word	0x40004400

08000ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_InitTick+0xd0>)
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f9c <HAL_InitTick+0xd0>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eea:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eec:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <HAL_InitTick+0xd0>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fb8a 	bl	800261c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f08:	f001 fb74 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8000f0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f10:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_InitTick+0xd4>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <HAL_InitTick+0xdc>)
 8000f20:	601a      	str	r2, [r3, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000f42:	4818      	ldr	r0, [pc, #96]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f44:	f001 fc25 	bl	8002792 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11b      	bne.n	8000f8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000f56:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <HAL_InitTick+0xd8>)
 8000f58:	f001 fc74 	bl	8002844 <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d111      	bne.n	8000f8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f6a:	201a      	movs	r0, #26
 8000f6c:	f000 fc0e 	bl	800178c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d808      	bhi.n	8000f88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	201a      	movs	r0, #26
 8000f7c:	f000 fbea 	bl	8001754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_InitTick+0xe0>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	2000024c 	.word	0x2000024c
 8000fa8:	40014800 	.word	0x40014800
 8000fac:	20000004 	.word	0x20000004

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000fee:	f001 fcda 	bl	80029a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000ff2:	4803      	ldr	r0, [pc, #12]	@ (8001000 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000ff4:	f001 fcd7 	bl	80029a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000170 	.word	0x20000170
 8001000:	2000024c 	.word	0x2000024c

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f005 fa27 	bl	80064a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fa57 	bl	800050c <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800106c:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 8001070:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001074:	20004dc0 	.word	0x20004dc0

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 fb4a 	bl	800173e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff ff0e 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd0e 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000294 	.word	0x20000294

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000294 	.word	0x20000294

08001100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e033      	b.n	800117e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd02 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	f043 0202 	orr.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f94a 	bl	80013ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
 800116e:	e001      	b.n	8001174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e113      	b.n	80013cc <HAL_ADC_ConfigChannel+0x244>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d925      	bls.n	8001200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68d9      	ldr	r1, [r3, #12]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3b1e      	subs	r3, #30
 80011ca:	2207      	movs	r2, #7
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43da      	mvns	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	400a      	ands	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68d9      	ldr	r1, [r3, #12]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4403      	add	r3, r0
 80011f2:	3b1e      	subs	r3, #30
 80011f4:	409a      	lsls	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	e022      	b.n	8001246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6919      	ldr	r1, [r3, #16]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	2207      	movs	r2, #7
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	400a      	ands	r2, r1
 8001222:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4403      	add	r3, r0
 800123c:	409a      	lsls	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b06      	cmp	r3, #6
 800124c:	d824      	bhi.n	8001298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b05      	subs	r3, #5
 8001260:	221f      	movs	r2, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b05      	subs	r3, #5
 800128a:	fa00 f203 	lsl.w	r2, r0, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	e04c      	b.n	8001332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d824      	bhi.n	80012ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b23      	subs	r3, #35	@ 0x23
 80012b2:	221f      	movs	r2, #31
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43da      	mvns	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	400a      	ands	r2, r1
 80012c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	3b23      	subs	r3, #35	@ 0x23
 80012dc:	fa00 f203 	lsl.w	r2, r0, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e8:	e023      	b.n	8001332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3b41      	subs	r3, #65	@ 0x41
 80012fc:	221f      	movs	r2, #31
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	400a      	ands	r2, r1
 800130a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b41      	subs	r3, #65	@ 0x41
 8001326:	fa00 f203 	lsl.w	r2, r0, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_ADC_ConfigChannel+0x250>)
 8001334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <HAL_ADC_ConfigChannel+0x254>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10f      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d8>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <HAL_ADC_ConfigChannel+0x254>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12b      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <HAL_ADC_ConfigChannel+0x258>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_ADC_ConfigChannel+0x1f4>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b11      	cmp	r3, #17
 800137a:	d122      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_ADC_ConfigChannel+0x258>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d111      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_ADC_ConfigChannel+0x25c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_ADC_ConfigChannel+0x260>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9a      	lsrs	r2, r3, #18
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40012300 	.word	0x40012300
 80013dc:	40012000 	.word	0x40012000
 80013e0:	10000012 	.word	0x10000012
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f4:	4b79      	ldr	r3, [pc, #484]	@ (80015dc <ADC_Init+0x1f0>)
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	431a      	orrs	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <ADC_Init+0x1f4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e00f      	b.n	80014ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0202 	bic.w	r2, r2, #2
 80014f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6899      	ldr	r1, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1b      	ldrb	r3, [r3, #24]
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001526:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	3b01      	subs	r3, #1
 8001544:	035a      	lsls	r2, r3, #13
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e007      	b.n	8001560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	3b01      	subs	r3, #1
 800157c:	051a      	lsls	r2, r3, #20
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	029a      	lsls	r2, r3, #10
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40012300 	.word	0x40012300
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff4c 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001766:	f7ff ff61 	bl	800162c <__NVIC_GetPriorityGrouping>
 800176a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff ffb1 	bl	80016d8 <NVIC_EncodePriority>
 8001776:	4602      	mov	r2, r0
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff80 	bl	8001684 <__NVIC_SetPriority>
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff54 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e159      	b.n	8001a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8148 	bne.w	8001a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a2 	beq.w	8001a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b57      	ldr	r3, [pc, #348]	@ (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a56      	ldr	r2, [pc, #344]	@ (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b54      	ldr	r3, [pc, #336]	@ (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a52      	ldr	r2, [pc, #328]	@ (8001a94 <HAL_GPIO_Init+0x2ec>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a49      	ldr	r2, [pc, #292]	@ (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x202>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x1fe>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a47      	ldr	r2, [pc, #284]	@ (8001aa0 <HAL_GPIO_Init+0x2f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a46      	ldr	r2, [pc, #280]	@ (8001aa4 <HAL_GPIO_Init+0x2fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x1f6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a45      	ldr	r2, [pc, #276]	@ (8001aa8 <HAL_GPIO_Init+0x300>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x1f2>
 8001996:	2304      	movs	r3, #4
 8001998:	e008      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199a:	2307      	movs	r3, #7
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019aa:	2300      	movs	r3, #0
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019bc:	4935      	ldr	r1, [pc, #212]	@ (8001a94 <HAL_GPIO_Init+0x2ec>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ca:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <HAL_GPIO_Init+0x304>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ee:	4a2f      	ldr	r2, [pc, #188]	@ (8001aac <HAL_GPIO_Init+0x304>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f4:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_GPIO_Init+0x304>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a18:	4a24      	ldr	r2, [pc, #144]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a42:	4a1a      	ldr	r2, [pc, #104]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	f67f aea2 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40013800 	.word	0x40013800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e12b      	b.n	8001d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff f850 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	@ 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b48:	f000 fd40 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8001b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a81      	ldr	r2, [pc, #516]	@ (8001d58 <HAL_I2C_Init+0x274>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d807      	bhi.n	8001b68 <HAL_I2C_Init+0x84>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4a80      	ldr	r2, [pc, #512]	@ (8001d5c <HAL_I2C_Init+0x278>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e006      	b.n	8001b76 <HAL_I2C_Init+0x92>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d60 <HAL_I2C_Init+0x27c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0e7      	b.n	8001d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a78      	ldr	r2, [pc, #480]	@ (8001d64 <HAL_I2C_Init+0x280>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a6a      	ldr	r2, [pc, #424]	@ (8001d58 <HAL_I2C_Init+0x274>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_I2C_Init+0xd4>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	e009      	b.n	8001bcc <HAL_I2C_Init+0xe8>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a69      	ldr	r2, [pc, #420]	@ (8001d68 <HAL_I2C_Init+0x284>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	3301      	adds	r3, #1
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bde:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	495c      	ldr	r1, [pc, #368]	@ (8001d58 <HAL_I2C_Init+0x274>)
 8001be8:	428b      	cmp	r3, r1
 8001bea:	d819      	bhi.n	8001c20 <HAL_I2C_Init+0x13c>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e59      	subs	r1, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bfa:	1c59      	adds	r1, r3, #1
 8001bfc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c00:	400b      	ands	r3, r1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_I2C_Init+0x138>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1a:	e051      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e04f      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d111      	bne.n	8001c4c <HAL_I2C_Init+0x168>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e58      	subs	r0, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e012      	b.n	8001c72 <HAL_I2C_Init+0x18e>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1e58      	subs	r0, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	0099      	lsls	r1, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Init+0x196>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e022      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10e      	bne.n	8001ca0 <HAL_I2C_Init+0x1bc>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1e58      	subs	r0, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	440b      	add	r3, r1
 8001c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c9e:	e00f      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	6809      	ldr	r1, [r1, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6911      	ldr	r1, [r2, #16]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68d2      	ldr	r2, [r2, #12]
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	000186a0 	.word	0x000186a0
 8001d5c:	001e847f 	.word	0x001e847f
 8001d60:	003d08ff 	.word	0x003d08ff
 8001d64:	431bde83 	.word	0x431bde83
 8001d68:	10624dd3 	.word	0x10624dd3

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e267      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d075      	beq.n	8001e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d8a:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d00c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	4b85      	ldr	r3, [pc, #532]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d112      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da2:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d05b      	beq.n	8001e74 <HAL_RCC_OscConfig+0x108>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d157      	bne.n	8001e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e242      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x74>
 8001dd2:	4b76      	ldr	r3, [pc, #472]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xb0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x98>
 8001dea:	4b70      	ldr	r3, [pc, #448]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6f      	ldr	r2, [pc, #444]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6d      	ldr	r3, [pc, #436]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6c      	ldr	r2, [pc, #432]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xb0>
 8001e04:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a68      	ldr	r2, [pc, #416]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a65      	ldr	r2, [pc, #404]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff f960 	bl	80010e8 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f95c 	bl	80010e8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e207      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xc0>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f94c 	bl	80010e8 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f948 	bl	80010e8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1f3      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0xe8>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e82:	4b4a      	ldr	r3, [pc, #296]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8e:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9a:	4b44      	ldr	r3, [pc, #272]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x152>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c7      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4937      	ldr	r1, [pc, #220]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <HAL_RCC_OscConfig+0x244>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f901 	bl	80010e8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff f8fd 	bl	80010e8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a8      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b28      	ldr	r3, [pc, #160]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4925      	ldr	r1, [pc, #148]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_RCC_OscConfig+0x244>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f8e0 	bl	80010e8 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f8dc 	bl	80010e8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e187      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d036      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_RCC_OscConfig+0x248>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7ff f8c0 	bl	80010e8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f8bc 	bl	80010e8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e167      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x200>
 8001f8a:	e01b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_RCC_OscConfig+0x248>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f8a9 	bl	80010e8 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	e00e      	b.n	8001fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f8a5 	bl	80010e8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d907      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e150      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	42470000 	.word	0x42470000
 8001fb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	4b88      	ldr	r3, [pc, #544]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ea      	bne.n	8001f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8097 	beq.w	8002100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b81      	ldr	r3, [pc, #516]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a7c      	ldr	r2, [pc, #496]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002002:	4b77      	ldr	r3, [pc, #476]	@ (80021e0 <HAL_RCC_OscConfig+0x474>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200e:	4b74      	ldr	r3, [pc, #464]	@ (80021e0 <HAL_RCC_OscConfig+0x474>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a73      	ldr	r2, [pc, #460]	@ (80021e0 <HAL_RCC_OscConfig+0x474>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7ff f865 	bl	80010e8 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002022:	f7ff f861 	bl	80010e8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e10c      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b6a      	ldr	r3, [pc, #424]	@ (80021e0 <HAL_RCC_OscConfig+0x474>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x2ea>
 8002048:	4b64      	ldr	r3, [pc, #400]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	4a63      	ldr	r2, [pc, #396]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6713      	str	r3, [r2, #112]	@ 0x70
 8002054:	e01c      	b.n	8002090 <HAL_RCC_OscConfig+0x324>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x30c>
 800205e:	4b5f      	ldr	r3, [pc, #380]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	4a5e      	ldr	r2, [pc, #376]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	@ 0x70
 800206a:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	4a5b      	ldr	r2, [pc, #364]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	@ 0x70
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0x324>
 8002078:	4b58      	ldr	r3, [pc, #352]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a57      	ldr	r2, [pc, #348]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	4b55      	ldr	r3, [pc, #340]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a54      	ldr	r2, [pc, #336]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff f826 	bl	80010e8 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7ff f822 	bl	80010e8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0cb      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	4b49      	ldr	r3, [pc, #292]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ee      	beq.n	80020a0 <HAL_RCC_OscConfig+0x334>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff f810 	bl	80010e8 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f80c 	bl	80010e8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0b5      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	4b3e      	ldr	r3, [pc, #248]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ee      	bne.n	80020cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f4:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	4a38      	ldr	r2, [pc, #224]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a1 	beq.w	800224c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800210a:	4b34      	ldr	r3, [pc, #208]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d05c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d141      	bne.n	80021a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <HAL_RCC_OscConfig+0x478>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe ffe0 	bl	80010e8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe ffdc 	bl	80010e8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e087      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	491b      	ldr	r1, [pc, #108]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x478>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe ffb5 	bl	80010e8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe ffb1 	bl	80010e8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e05c      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x416>
 80021a0:	e054      	b.n	800224c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_RCC_OscConfig+0x478>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff9e 	bl	80010e8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe ff9a 	bl	80010e8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e045      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x444>
 80021ce:	e03d      	b.n	800224c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e038      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x4ec>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d028      	beq.n	8002248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d121      	bne.n	8002248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d11a      	bne.n	8002248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800221e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002220:	4293      	cmp	r3, r2
 8002222:	d111      	bne.n	8002248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	3b01      	subs	r3, #1
 8002232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cc      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b68      	ldr	r3, [pc, #416]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90c      	bls.n	8002298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b65      	ldr	r3, [pc, #404]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b8      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b0:	4b59      	ldr	r3, [pc, #356]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a58      	ldr	r2, [pc, #352]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a52      	ldr	r2, [pc, #328]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b50      	ldr	r3, [pc, #320]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	494d      	ldr	r1, [pc, #308]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d044      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b47      	ldr	r3, [pc, #284]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d119      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d003      	beq.n	800231a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b3f      	ldr	r3, [pc, #252]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e067      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b37      	ldr	r3, [pc, #220]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4934      	ldr	r1, [pc, #208]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7fe fecc 	bl	80010e8 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7fe fec8 	bl	80010e8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e04f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20c      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e032      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4916      	ldr	r1, [pc, #88]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490e      	ldr	r1, [pc, #56]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e2:	f000 f821 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490a      	ldr	r1, [pc, #40]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fd62 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00
 8002418:	40023800 	.word	0x40023800
 800241c:	080066d8 	.word	0x080066d8
 8002420:	20000000 	.word	0x20000000
 8002424:	20000004 	.word	0x20000004

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b090      	sub	sp, #64	@ 0x40
 800242e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d00d      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x40>
 800244c:	2b08      	cmp	r3, #8
 800244e:	f200 80a1 	bhi.w	8002594 <HAL_RCC_GetSysClockFreq+0x16c>
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x34>
 8002456:	2b04      	cmp	r3, #4
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x3a>
 800245a:	e09b      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x184>)
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002460:	e09b      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002462:	4b53      	ldr	r3, [pc, #332]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002466:	e098      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002468:	4b4f      	ldr	r3, [pc, #316]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002470:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002472:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d028      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	2200      	movs	r2, #0
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	627a      	str	r2, [r7, #36]	@ 0x24
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002490:	2100      	movs	r1, #0
 8002492:	4b47      	ldr	r3, [pc, #284]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002494:	fb03 f201 	mul.w	r2, r3, r1
 8002498:	2300      	movs	r3, #0
 800249a:	fb00 f303 	mul.w	r3, r0, r3
 800249e:	4413      	add	r3, r2
 80024a0:	4a43      	ldr	r2, [pc, #268]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a2:	fba0 1202 	umull	r1, r2, r0, r2
 80024a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a8:	460a      	mov	r2, r1
 80024aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ae:	4413      	add	r3, r2
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	2200      	movs	r2, #0
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	61fa      	str	r2, [r7, #28]
 80024ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024c2:	f7fd fe8d 	bl	80001e0 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4613      	mov	r3, r2
 80024cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ce:	e053      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d0:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	2200      	movs	r2, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	617a      	str	r2, [r7, #20]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024e2:	f04f 0b00 	mov.w	fp, #0
 80024e6:	4652      	mov	r2, sl
 80024e8:	465b      	mov	r3, fp
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002502:	eb63 090b 	sbc.w	r9, r3, fp
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800251a:	ebb2 0408 	subs.w	r4, r2, r8
 800251e:	eb63 0509 	sbc.w	r5, r3, r9
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	00eb      	lsls	r3, r5, #3
 800252c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002530:	00e2      	lsls	r2, r4, #3
 8002532:	4614      	mov	r4, r2
 8002534:	461d      	mov	r5, r3
 8002536:	eb14 030a 	adds.w	r3, r4, sl
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	eb45 030b 	adc.w	r3, r5, fp
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254e:	4629      	mov	r1, r5
 8002550:	028b      	lsls	r3, r1, #10
 8002552:	4621      	mov	r1, r4
 8002554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002558:	4621      	mov	r1, r4
 800255a:	028a      	lsls	r2, r1, #10
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002562:	2200      	movs	r2, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256c:	f7fd fe38 	bl	80001e0 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4613      	mov	r3, r2
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002596:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800259c:	4618      	mov	r0, r3
 800259e:	3740      	adds	r7, #64	@ 0x40
 80025a0:	46bd      	mov	sp, r7
 80025a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	017d7840 	.word	0x017d7840

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	080066e8 	.word	0x080066e8

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffdc 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0b5b      	lsrs	r3, r3, #13
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	080066e8 	.word	0x080066e8

0800261c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	220f      	movs	r2, #15
 800262a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800262c:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800265e:	4b07      	ldr	r3, [pc, #28]	@ (800267c <HAL_RCC_GetClockConfig+0x60>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0207 	and.w	r2, r3, #7
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40023c00 	.word	0x40023c00

08002680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07b      	b.n	800278a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026a2:	d009      	beq.n	80026b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	e005      	b.n	80026b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fab4 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273c:	ea42 0103 	orr.w	r1, r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0104 	and.w	r1, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	f003 0210 	and.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e041      	b.n	8002828 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f839 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f000 fac3 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e044      	b.n	80028e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d018      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x6c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002886:	d013      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x6c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00e      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x6c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a19      	ldr	r2, [pc, #100]	@ (80028fc <HAL_TIM_Base_Start_IT+0xb8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x6c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_TIM_Base_Start_IT+0xbc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x6c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a16      	ldr	r2, [pc, #88]	@ (8002904 <HAL_TIM_Base_Start_IT+0xc0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d010      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	e007      	b.n	80028e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40014000 	.word	0x40014000

08002908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e041      	b.n	800299e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe f9ce 	bl	8000cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fa08 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01b      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0202 	mvn.w	r2, #2
 80029da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f995 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 80029f6:	e005      	b.n	8002a04 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f987 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f998 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01b      	beq.n	8002a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0204 	mvn.w	r2, #4
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f96f 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f961 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f972 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01b      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0208 	mvn.w	r2, #8
 8002a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f949 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002a8e:	e005      	b.n	8002a9c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f93b 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f94c 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01b      	beq.n	8002aee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0210 	mvn.w	r2, #16
 8002abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f923 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f915 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f926 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f06f 0201 	mvn.w	r2, #1
 8002b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fd ffc7 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00c      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fbef 	bl	8003314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8f7 	bl	8002d48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0220 	mvn.w	r2, #32
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fbc1 	bl	8003300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0ae      	b.n	8002d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	f200 809f 	bhi.w	8002cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bf1 	.word	0x08002bf1
 8002bc0:	08002cf5 	.word	0x08002cf5
 8002bc4:	08002cf5 	.word	0x08002cf5
 8002bc8:	08002cf5 	.word	0x08002cf5
 8002bcc:	08002c31 	.word	0x08002c31
 8002bd0:	08002cf5 	.word	0x08002cf5
 8002bd4:	08002cf5 	.word	0x08002cf5
 8002bd8:	08002cf5 	.word	0x08002cf5
 8002bdc:	08002c73 	.word	0x08002c73
 8002be0:	08002cf5 	.word	0x08002cf5
 8002be4:	08002cf5 	.word	0x08002cf5
 8002be8:	08002cf5 	.word	0x08002cf5
 8002bec:	08002cb3 	.word	0x08002cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f936 	bl	8002e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0208 	orr.w	r2, r2, #8
 8002c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6999      	ldr	r1, [r3, #24]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	619a      	str	r2, [r3, #24]
      break;
 8002c2e:	e064      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f97c 	bl	8002f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	021a      	lsls	r2, r3, #8
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]
      break;
 8002c70:	e043      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f9c7 	bl	800300c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0208 	orr.w	r2, r2, #8
 8002c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0204 	bic.w	r2, r2, #4
 8002c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69d9      	ldr	r1, [r3, #28]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	61da      	str	r2, [r3, #28]
      break;
 8002cb0:	e023      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fa11 	bl	80030e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69d9      	ldr	r1, [r3, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	61da      	str	r2, [r3, #28]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a37      	ldr	r2, [pc, #220]	@ (8002e4c <TIM_Base_SetConfig+0xf0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00f      	beq.n	8002d94 <TIM_Base_SetConfig+0x38>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7a:	d00b      	beq.n	8002d94 <TIM_Base_SetConfig+0x38>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <TIM_Base_SetConfig+0xf4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <TIM_Base_SetConfig+0x38>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a33      	ldr	r2, [pc, #204]	@ (8002e54 <TIM_Base_SetConfig+0xf8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_Base_SetConfig+0x38>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a32      	ldr	r2, [pc, #200]	@ (8002e58 <TIM_Base_SetConfig+0xfc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d108      	bne.n	8002da6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a28      	ldr	r2, [pc, #160]	@ (8002e4c <TIM_Base_SetConfig+0xf0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01b      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db4:	d017      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a25      	ldr	r2, [pc, #148]	@ (8002e50 <TIM_Base_SetConfig+0xf4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a24      	ldr	r2, [pc, #144]	@ (8002e54 <TIM_Base_SetConfig+0xf8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00f      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a23      	ldr	r2, [pc, #140]	@ (8002e58 <TIM_Base_SetConfig+0xfc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00b      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	@ (8002e5c <TIM_Base_SetConfig+0x100>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a21      	ldr	r2, [pc, #132]	@ (8002e60 <TIM_Base_SetConfig+0x104>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_Base_SetConfig+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a20      	ldr	r2, [pc, #128]	@ (8002e64 <TIM_Base_SetConfig+0x108>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <TIM_Base_SetConfig+0xf0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d103      	bne.n	8002e26 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f043 0204 	orr.w	r2, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f023 0201 	bic.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0303 	bic.w	r3, r3, #3
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f30 <TIM_OC1_SetConfig+0xc8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d10c      	bne.n	8002ede <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f023 0308 	bic.w	r3, r3, #8
 8002eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	@ (8002f30 <TIM_OC1_SetConfig+0xc8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d111      	bne.n	8002f0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40010000 	.word	0x40010000

08002f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 0210 	bic.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f023 0320 	bic.w	r3, r3, #32
 8002f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <TIM_OC2_SetConfig+0xd4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10d      	bne.n	8002fb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <TIM_OC2_SetConfig+0xd4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d113      	bne.n	8002fe0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000

0800300c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <TIM_OC3_SetConfig+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10d      	bne.n	8003086 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <TIM_OC3_SetConfig+0xd0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d113      	bne.n	80030b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40010000 	.word	0x40010000

080030e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800310e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800312a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	031b      	lsls	r3, r3, #12
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a10      	ldr	r2, [pc, #64]	@ (800317c <TIM_OC4_SetConfig+0x9c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d109      	bne.n	8003154 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e050      	b.n	800323a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e4:	d013      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a18      	ldr	r2, [pc, #96]	@ (800324c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	@ (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a15      	ldr	r2, [pc, #84]	@ (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a13      	ldr	r2, [pc, #76]	@ (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10c      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	4313      	orrs	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40014000 	.word	0x40014000

0800325c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003274:	2302      	movs	r3, #2
 8003276:	e03d      	b.n	80032f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e042      	b.n	80033c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fd20 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	@ 0x24
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800336a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f82b 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	@ 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	@ (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	@ (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7ff f8c4 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7ff f8ab 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	@ 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800350c:	f7fc fe68 	bl	80001e0 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	@ (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	@ 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	@ 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035a2:	f7fc fe1d 	bl	80001e0 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	@ 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	@ (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800365e:	f7fc fdbf 	bl	80001e0 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	@ 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	@ 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e106      	b.n	80038a0 <UART_SetConfig+0x4d8>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003720:	f7fc fd5e 	bl	80001e0 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	@ (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800379e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037be:	f7fc fd0f 	bl	80001e0 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2264      	movs	r2, #100	@ 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	@ 0x32
 80037dc:	4a33      	ldr	r2, [pc, #204]	@ (80038ac <UART_SetConfig+0x4e4>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80037f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80037f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	415b      	adcs	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	4641      	mov	r1, r8
 800380a:	1851      	adds	r1, r2, r1
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	4649      	mov	r1, r9
 8003810:	414b      	adcs	r3, r1
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003820:	4659      	mov	r1, fp
 8003822:	00cb      	lsls	r3, r1, #3
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382a:	4651      	mov	r1, sl
 800382c:	00ca      	lsls	r2, r1, #3
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	4603      	mov	r3, r0
 8003834:	4642      	mov	r2, r8
 8003836:	189b      	adds	r3, r3, r2
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	464b      	mov	r3, r9
 800383c:	460a      	mov	r2, r1
 800383e:	eb42 0303 	adc.w	r3, r2, r3
 8003842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	663b      	str	r3, [r7, #96]	@ 0x60
 800384e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800385c:	4649      	mov	r1, r9
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003866:	4641      	mov	r1, r8
 8003868:	008a      	lsls	r2, r1, #2
 800386a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800386e:	f7fc fcb7 	bl	80001e0 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <UART_SetConfig+0x4e4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	@ 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	@ 0x32
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <UART_SetConfig+0x4e4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4422      	add	r2, r4
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <__NVIC_SetPriority>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	db0a      	blt.n	80038da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	490c      	ldr	r1, [pc, #48]	@ (80038fc <__NVIC_SetPriority+0x4c>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	440b      	add	r3, r1
 80038d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038d8:	e00a      	b.n	80038f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4908      	ldr	r1, [pc, #32]	@ (8003900 <__NVIC_SetPriority+0x50>)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	3b04      	subs	r3, #4
 80038e8:	0112      	lsls	r2, r2, #4
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	440b      	add	r3, r1
 80038ee:	761a      	strb	r2, [r3, #24]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000e100 	.word	0xe000e100
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <SysTick_Handler+0x1c>)
 800390a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800390c:	f001 fd46 	bl	800539c <xTaskGetSchedulerState>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003916:	f002 fb3f 	bl	8005f98 <xPortSysTickHandler>
  }
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000e010 	.word	0xe000e010

08003924 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003928:	2100      	movs	r1, #0
 800392a:	f06f 0004 	mvn.w	r0, #4
 800392e:	f7ff ffbf 	bl	80038b0 <__NVIC_SetPriority>
#endif
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800393e:	f3ef 8305 	mrs	r3, IPSR
 8003942:	603b      	str	r3, [r7, #0]
  return(result);
 8003944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800394a:	f06f 0305 	mvn.w	r3, #5
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	e00c      	b.n	800396c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003952:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <osKernelInitialize+0x44>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <osKernelInitialize+0x44>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003960:	2300      	movs	r3, #0
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	e002      	b.n	800396c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800396a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800396c:	687b      	ldr	r3, [r7, #4]
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000298 	.word	0x20000298

08003980 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003986:	f3ef 8305 	mrs	r3, IPSR
 800398a:	603b      	str	r3, [r7, #0]
  return(result);
 800398c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003992:	f06f 0305 	mvn.w	r3, #5
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e010      	b.n	80039bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <osKernelStart+0x48>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d109      	bne.n	80039b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039a2:	f7ff ffbf 	bl	8003924 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <osKernelStart+0x48>)
 80039a8:	2202      	movs	r2, #2
 80039aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039ac:	f001 f892 	bl	8004ad4 <vTaskStartScheduler>
      stat = osOK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e002      	b.n	80039bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000298 	.word	0x20000298

080039cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	@ 0x38
 80039d0:	af04      	add	r7, sp, #16
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039dc:	f3ef 8305 	mrs	r3, IPSR
 80039e0:	617b      	str	r3, [r7, #20]
  return(result);
 80039e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d17e      	bne.n	8003ae6 <osThreadNew+0x11a>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d07b      	beq.n	8003ae6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039f2:	2318      	movs	r3, #24
 80039f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d045      	beq.n	8003a92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <osThreadNew+0x48>
        name = attr->name;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <osThreadNew+0x6e>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b38      	cmp	r3, #56	@ 0x38
 8003a2c:	d805      	bhi.n	8003a3a <osThreadNew+0x6e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <osThreadNew+0x72>
        return (NULL);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e054      	b.n	8003ae8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	089b      	lsrs	r3, r3, #2
 8003a4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00e      	beq.n	8003a74 <osThreadNew+0xa8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2ba7      	cmp	r3, #167	@ 0xa7
 8003a5c:	d90a      	bls.n	8003a74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <osThreadNew+0xa8>
        mem = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e010      	b.n	8003a96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10c      	bne.n	8003a96 <osThreadNew+0xca>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d108      	bne.n	8003a96 <osThreadNew+0xca>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <osThreadNew+0xca>
          mem = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e001      	b.n	8003a96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d110      	bne.n	8003abe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aa4:	9202      	str	r2, [sp, #8]
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6a3a      	ldr	r2, [r7, #32]
 8003ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fe1a 	bl	80046ec <xTaskCreateStatic>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e013      	b.n	8003ae6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d110      	bne.n	8003ae6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fe68 	bl	80047ac <xTaskCreate>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <osThreadNew+0x11a>
            hTask = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ae6:	693b      	ldr	r3, [r7, #16]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3728      	adds	r7, #40	@ 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af8:	f3ef 8305 	mrs	r3, IPSR
 8003afc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003afe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <osDelay+0x1c>
    stat = osErrorISR;
 8003b04:	f06f 0305 	mvn.w	r3, #5
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e007      	b.n	8003b1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 ffa6 	bl	8004a68 <vTaskDelay>
    }
  }

  return (stat);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4a06      	ldr	r2, [pc, #24]	@ (8003b58 <vApplicationGetIdleTaskMemory+0x30>)
 8003b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2280      	movs	r2, #128	@ 0x80
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2000029c 	.word	0x2000029c
 8003b58:	20000344 	.word	0x20000344

08003b5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a07      	ldr	r2, [pc, #28]	@ (8003b88 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4a06      	ldr	r2, [pc, #24]	@ (8003b8c <vApplicationGetTimerTaskMemory+0x30>)
 8003b72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b7a:	601a      	str	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000544 	.word	0x20000544
 8003b8c:	200005ec 	.word	0x200005ec

08003b90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f103 0208 	add.w	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ba8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 0208 	add.w	r2, r3, #8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f103 0208 	add.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c48:	d103      	bne.n	8003c52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e00c      	b.n	8003c6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3308      	adds	r3, #8
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e002      	b.n	8003c60 <vListInsert+0x2e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d2f6      	bcs.n	8003c5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6892      	ldr	r2, [r2, #8]
 8003cba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6852      	ldr	r2, [r2, #4]
 8003cc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d103      	bne.n	8003cd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1e5a      	subs	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d24:	f002 f8a8 	bl	8005e78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	3b01      	subs	r3, #1
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	22ff      	movs	r2, #255	@ 0xff
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	22ff      	movs	r2, #255	@ 0xff
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d114      	bne.n	8003da4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3310      	adds	r3, #16
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f942 	bl	8005010 <xTaskRemoveFromEventList>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <xQueueGenericReset+0xd0>)
 8003d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	e009      	b.n	8003db8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3310      	adds	r3, #16
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fef1 	bl	8003b90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3324      	adds	r3, #36	@ 0x24
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff feec 	bl	8003b90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003db8:	f002 f890 	bl	8005edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dbc:	2301      	movs	r3, #1
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	@ 0x38
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <xQueueGenericCreateStatic+0x56>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <xQueueGenericCreateStatic+0x5a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xQueueGenericCreateStatic+0x5c>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	623b      	str	r3, [r7, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <xQueueGenericCreateStatic+0x84>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <xQueueGenericCreateStatic+0x88>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <xQueueGenericCreateStatic+0x8a>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	61fb      	str	r3, [r7, #28]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e72:	2350      	movs	r3, #80	@ 0x50
 8003e74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b50      	cmp	r3, #80	@ 0x50
 8003e7a:	d00b      	beq.n	8003e94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61bb      	str	r3, [r7, #24]
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ea8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f805 	bl	8003ec6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3730      	adds	r7, #48	@ 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e002      	b.n	8003ee8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	69b8      	ldr	r0, [r7, #24]
 8003ef8:	f7ff fefe 	bl	8003cf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	@ 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <xQueueGenericSend+0x34>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <xQueueGenericSend+0x42>
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <xQueueGenericSend+0x46>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <xQueueGenericSend+0x48>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <xQueueGenericSend+0x64>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d103      	bne.n	8003f7e <xQueueGenericSend+0x72>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <xQueueGenericSend+0x76>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <xQueueGenericSend+0x78>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <xQueueGenericSend+0x94>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	623b      	str	r3, [r7, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fa0:	f001 f9fc 	bl	800539c <xTaskGetSchedulerState>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <xQueueGenericSend+0xa4>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <xQueueGenericSend+0xa8>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <xQueueGenericSend+0xaa>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	61fb      	str	r3, [r7, #28]
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	e7fd      	b.n	8003fce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fd2:	f001 ff51 	bl	8005e78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <xQueueGenericSend+0xdc>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d129      	bne.n	800403c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fee:	f000 fa0f 	bl	8004410 <prvCopyDataToQueue>
 8003ff2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	3324      	adds	r3, #36	@ 0x24
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f805 	bl	8005010 <xTaskRemoveFromEventList>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b3f      	ldr	r3, [pc, #252]	@ (800410c <xQueueGenericSend+0x200>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	e00a      	b.n	8004034 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004024:	4b39      	ldr	r3, [pc, #228]	@ (800410c <xQueueGenericSend+0x200>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004034:	f001 ff52 	bl	8005edc <vPortExitCritical>
				return pdPASS;
 8004038:	2301      	movs	r3, #1
 800403a:	e063      	b.n	8004104 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004042:	f001 ff4b 	bl	8005edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004046:	2300      	movs	r3, #0
 8004048:	e05c      	b.n	8004104 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800404a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f83f 	bl	80050d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800405e:	f001 ff3d 	bl	8005edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004062:	f000 fda7 	bl	8004bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004066:	f001 ff07 	bl	8005e78 <vPortEnterCritical>
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004076:	d103      	bne.n	8004080 <xQueueGenericSend+0x174>
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004086:	b25b      	sxtb	r3, r3
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x18a>
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004096:	f001 ff21 	bl	8005edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f82e 	bl	8005104 <xTaskCheckForTimeOut>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d124      	bne.n	80040f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b0:	f000 faa6 	bl	8004600 <prvIsQueueFull>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	3310      	adds	r3, #16
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 ff52 	bl	8004f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ca:	f000 fa31 	bl	8004530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ce:	f000 fd7f 	bl	8004bd0 <xTaskResumeAll>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f af7c 	bne.w	8003fd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <xQueueGenericSend+0x200>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	e772      	b.n	8003fd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ee:	f000 fa1f 	bl	8004530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040f2:	f000 fd6d 	bl	8004bd0 <xTaskResumeAll>
 80040f6:	e76c      	b.n	8003fd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fa:	f000 fa19 	bl	8004530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040fe:	f000 fd67 	bl	8004bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004104:	4618      	mov	r0, r3
 8004106:	3738      	adds	r7, #56	@ 0x38
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b090      	sub	sp, #64	@ 0x40
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <xQueueGenericSendFromISR+0x3e>
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <xQueueGenericSendFromISR+0x42>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <xQueueGenericSendFromISR+0x44>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d103      	bne.n	800417e <xQueueGenericSendFromISR+0x6e>
 8004176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <xQueueGenericSendFromISR+0x72>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <xQueueGenericSendFromISR+0x74>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	623b      	str	r3, [r7, #32]
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	e7fd      	b.n	800419c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041a0:	f001 ff4a 	bl	8006038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041a4:	f3ef 8211 	mrs	r2, BASEPRI
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <xQueueGenericSendFromISR+0xc2>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d12f      	bne.n	8004232 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041e8:	f000 f912 	bl	8004410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041f4:	d112      	bne.n	800421c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	3324      	adds	r3, #36	@ 0x24
 8004202:	4618      	mov	r0, r3
 8004204:	f000 ff04 	bl	8005010 <xTaskRemoveFromEventList>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e007      	b.n	800422c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800421c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004220:	3301      	adds	r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	b25a      	sxtb	r2, r3
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800422c:	2301      	movs	r3, #1
 800422e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004230:	e001      	b.n	8004236 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004232:	2300      	movs	r3, #0
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004244:	4618      	mov	r0, r3
 8004246:	3740      	adds	r7, #64	@ 0x40
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	@ 0x30
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004258:	2300      	movs	r3, #0
 800425a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <xQueueReceive+0x32>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	623b      	str	r3, [r7, #32]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <xQueueReceive+0x40>
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <xQueueReceive+0x44>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <xQueueReceive+0x46>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <xQueueReceive+0x62>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61fb      	str	r3, [r7, #28]
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	e7fd      	b.n	80042aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ae:	f001 f875 	bl	800539c <xTaskGetSchedulerState>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <xQueueReceive+0x72>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <xQueueReceive+0x76>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <xQueueReceive+0x78>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <xQueueReceive+0x94>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	61bb      	str	r3, [r7, #24]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042e0:	f001 fdca 	bl	8005e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01f      	beq.n	8004330 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042f4:	f000 f8f6 	bl	80044e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	1e5a      	subs	r2, r3, #1
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00f      	beq.n	8004328 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	3310      	adds	r3, #16
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fe7f 	bl	8005010 <xTaskRemoveFromEventList>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004318:	4b3c      	ldr	r3, [pc, #240]	@ (800440c <xQueueReceive+0x1c0>)
 800431a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004328:	f001 fdd8 	bl	8005edc <vPortExitCritical>
				return pdPASS;
 800432c:	2301      	movs	r3, #1
 800432e:	e069      	b.n	8004404 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004336:	f001 fdd1 	bl	8005edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800433a:	2300      	movs	r3, #0
 800433c:	e062      	b.n	8004404 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004344:	f107 0310 	add.w	r3, r7, #16
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fec5 	bl	80050d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800434e:	2301      	movs	r3, #1
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004352:	f001 fdc3 	bl	8005edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004356:	f000 fc2d 	bl	8004bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800435a:	f001 fd8d 	bl	8005e78 <vPortEnterCritical>
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004364:	b25b      	sxtb	r3, r3
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800436a:	d103      	bne.n	8004374 <xQueueReceive+0x128>
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800437a:	b25b      	sxtb	r3, r3
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004380:	d103      	bne.n	800438a <xQueueReceive+0x13e>
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800438a:	f001 fda7 	bl	8005edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800438e:	1d3a      	adds	r2, r7, #4
 8004390:	f107 0310 	add.w	r3, r7, #16
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f000 feb4 	bl	8005104 <xTaskCheckForTimeOut>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d123      	bne.n	80043ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043a4:	f000 f916 	bl	80045d4 <prvIsQueueEmpty>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	3324      	adds	r3, #36	@ 0x24
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fdd8 	bl	8004f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043be:	f000 f8b7 	bl	8004530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043c2:	f000 fc05 	bl	8004bd0 <xTaskResumeAll>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d189      	bne.n	80042e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <xQueueReceive+0x1c0>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	e780      	b.n	80042e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043e0:	f000 f8a6 	bl	8004530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043e4:	f000 fbf4 	bl	8004bd0 <xTaskResumeAll>
 80043e8:	e77a      	b.n	80042e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ec:	f000 f8a0 	bl	8004530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043f0:	f000 fbee 	bl	8004bd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f6:	f000 f8ed 	bl	80045d4 <prvIsQueueEmpty>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f43f af6f 	beq.w	80042e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004402:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004404:	4618      	mov	r0, r3
 8004406:	3730      	adds	r7, #48	@ 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d14d      	bne.n	80044d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 ffcc 	bl	80053d8 <xTaskPriorityDisinherit>
 8004440:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	e043      	b.n	80044d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d119      	bne.n	8004484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6858      	ldr	r0, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	461a      	mov	r2, r3
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	f002 f8a8 	bl	80065b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	441a      	add	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d32b      	bcc.n	80044d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	e026      	b.n	80044d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68d8      	ldr	r0, [r3, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	461a      	mov	r2, r3
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	f002 f88e 	bl	80065b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	425b      	negs	r3, r3
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d207      	bcs.n	80044c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	425b      	negs	r3, r3
 80044ba:	441a      	add	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d105      	bne.n	80044d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044da:	697b      	ldr	r3, [r7, #20]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	441a      	add	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	d303      	bcc.n	8004518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68d9      	ldr	r1, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	461a      	mov	r2, r3
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f002 f844 	bl	80065b0 <memcpy>
	}
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004538:	f001 fc9e 	bl	8005e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004544:	e011      	b.n	800456a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d012      	beq.n	8004574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3324      	adds	r3, #36	@ 0x24
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fd5c 	bl	8005010 <xTaskRemoveFromEventList>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800455e:	f000 fe35 	bl	80051cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	3b01      	subs	r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800456a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	dce9      	bgt.n	8004546 <prvUnlockQueue+0x16>
 8004572:	e000      	b.n	8004576 <prvUnlockQueue+0x46>
					break;
 8004574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	22ff      	movs	r2, #255	@ 0xff
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800457e:	f001 fcad 	bl	8005edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004582:	f001 fc79 	bl	8005e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800458c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800458e:	e011      	b.n	80045b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d012      	beq.n	80045be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3310      	adds	r3, #16
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd37 	bl	8005010 <xTaskRemoveFromEventList>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045a8:	f000 fe10 	bl	80051cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045ac:	7bbb      	ldrb	r3, [r7, #14]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dce9      	bgt.n	8004590 <prvUnlockQueue+0x60>
 80045bc:	e000      	b.n	80045c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	22ff      	movs	r2, #255	@ 0xff
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045c8:	f001 fc88 	bl	8005edc <vPortExitCritical>
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045dc:	f001 fc4c 	bl	8005e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e001      	b.n	80045f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045f2:	f001 fc73 	bl	8005edc <vPortExitCritical>

	return xReturn;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004608:	f001 fc36 	bl	8005e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004614:	429a      	cmp	r2, r3
 8004616:	d102      	bne.n	800461e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e001      	b.n	8004622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004622:	f001 fc5b 	bl	8005edc <vPortExitCritical>

	return xReturn;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e014      	b.n	800466a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004640:	4a0f      	ldr	r2, [pc, #60]	@ (8004680 <vQueueAddToRegistry+0x50>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800464c:	490c      	ldr	r1, [pc, #48]	@ (8004680 <vQueueAddToRegistry+0x50>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004656:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <vQueueAddToRegistry+0x50>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004662:	e006      	b.n	8004672 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b07      	cmp	r3, #7
 800466e:	d9e7      	bls.n	8004640 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200009ec 	.word	0x200009ec

08004684 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004694:	f001 fbf0 	bl	8005e78 <vPortEnterCritical>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800469e:	b25b      	sxtb	r3, r3
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a4:	d103      	bne.n	80046ae <vQueueWaitForMessageRestricted+0x2a>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ba:	d103      	bne.n	80046c4 <vQueueWaitForMessageRestricted+0x40>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046c4:	f001 fc0a 	bl	8005edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3324      	adds	r3, #36	@ 0x24
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fc6d 	bl	8004fb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff26 	bl	8004530 <prvUnlockQueue>
	}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	@ 0x38
 80046f0:	af04      	add	r7, sp, #16
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	623b      	str	r3, [r7, #32]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <xTaskCreateStatic+0x4a>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	61fb      	str	r3, [r7, #28]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004736:	23a8      	movs	r3, #168	@ 0xa8
 8004738:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2ba8      	cmp	r3, #168	@ 0xa8
 800473e:	d00b      	beq.n	8004758 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	61bb      	str	r3, [r7, #24]
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004758:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01e      	beq.n	800479e <xTaskCreateStatic+0xb2>
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	2202      	movs	r2, #2
 8004774:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004778:	2300      	movs	r3, #0
 800477a:	9303      	str	r3, [sp, #12]
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f851 	bl	8004838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004798:	f000 f8f6 	bl	8004988 <prvAddNewTaskToReadyList>
 800479c:	e001      	b.n	80047a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047a2:	697b      	ldr	r3, [r7, #20]
	}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	@ 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08c      	sub	sp, #48	@ 0x30
 80047b0:	af04      	add	r7, sp, #16
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fc7b 	bl	80060bc <pvPortMalloc>
 80047c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ce:	20a8      	movs	r0, #168	@ 0xa8
 80047d0:	f001 fc74 	bl	80060bc <pvPortMalloc>
 80047d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e2:	e005      	b.n	80047f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047e4:	6978      	ldr	r0, [r7, #20]
 80047e6:	f001 fd37 	bl	8006258 <vPortFree>
 80047ea:	e001      	b.n	80047f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	2300      	movs	r3, #0
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f80f 	bl	8004838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800481a:	69f8      	ldr	r0, [r7, #28]
 800481c:	f000 f8b4 	bl	8004988 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004820:	2301      	movs	r3, #1
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e002      	b.n	800482c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800482a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800482c:	69bb      	ldr	r3, [r7, #24]
	}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	461a      	mov	r2, r3
 8004850:	21a5      	movs	r1, #165	@ 0xa5
 8004852:	f001 fe21 	bl	8006498 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004860:	3b01      	subs	r3, #1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	617b      	str	r3, [r7, #20]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01f      	beq.n	80048d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e012      	b.n	80048c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	7819      	ldrb	r1, [r3, #0]
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	3334      	adds	r3, #52	@ 0x34
 80048ae:	460a      	mov	r2, r1
 80048b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3301      	adds	r3, #1
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d9e9      	bls.n	800489e <prvInitialiseNewTask+0x66>
 80048ca:	e000      	b.n	80048ce <prvInitialiseNewTask+0x96>
			{
				break;
 80048cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048d6:	e003      	b.n	80048e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	2b37      	cmp	r3, #55	@ 0x37
 80048e4:	d901      	bls.n	80048ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048e6:	2337      	movs	r3, #55	@ 0x37
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2200      	movs	r2, #0
 80048fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	3304      	adds	r3, #4
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff f965 	bl	8003bd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	3318      	adds	r3, #24
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f960 	bl	8003bd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004914:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	2200      	movs	r2, #0
 800492a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	3354      	adds	r3, #84	@ 0x54
 800493a:	224c      	movs	r2, #76	@ 0x4c
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fdaa 	bl	8006498 <memset>
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	4a0d      	ldr	r2, [pc, #52]	@ (800497c <prvInitialiseNewTask+0x144>)
 8004948:	659a      	str	r2, [r3, #88]	@ 0x58
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <prvInitialiseNewTask+0x148>)
 800494e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004952:	4a0c      	ldr	r2, [pc, #48]	@ (8004984 <prvInitialiseNewTask+0x14c>)
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	69b8      	ldr	r0, [r7, #24]
 800495c:	f001 f95a 	bl	8005c14 <pxPortInitialiseStack>
 8004960:	4602      	mov	r2, r0
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004972:	bf00      	nop
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20004c80 	.word	0x20004c80
 8004980:	20004ce8 	.word	0x20004ce8
 8004984:	20004d50 	.word	0x20004d50

08004988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004990:	f001 fa72 	bl	8005e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004994:	4b2d      	ldr	r3, [pc, #180]	@ (8004a4c <prvAddNewTaskToReadyList+0xc4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a4c <prvAddNewTaskToReadyList+0xc4>)
 800499c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800499e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049ac:	4b27      	ldr	r3, [pc, #156]	@ (8004a4c <prvAddNewTaskToReadyList+0xc4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d110      	bne.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049b4:	f000 fc2e 	bl	8005214 <prvInitialiseTaskLists>
 80049b8:	e00d      	b.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049ba:	4b26      	ldr	r3, [pc, #152]	@ (8004a54 <prvAddNewTaskToReadyList+0xcc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049c2:	4b23      	ldr	r3, [pc, #140]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d802      	bhi.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <prvAddNewTaskToReadyList+0xd0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a58 <prvAddNewTaskToReadyList+0xd0>)
 80049de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <prvAddNewTaskToReadyList+0xd0>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <prvAddNewTaskToReadyList+0xd4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d903      	bls.n	80049fc <prvAddNewTaskToReadyList+0x74>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	4a18      	ldr	r2, [pc, #96]	@ (8004a5c <prvAddNewTaskToReadyList+0xd4>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a15      	ldr	r2, [pc, #84]	@ (8004a60 <prvAddNewTaskToReadyList+0xd8>)
 8004a0a:	441a      	add	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7ff f8e9 	bl	8003bea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a18:	f001 fa60 	bl	8005edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <prvAddNewTaskToReadyList+0xcc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <prvAddNewTaskToReadyList+0xc8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d207      	bcs.n	8004a42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a32:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <prvAddNewTaskToReadyList+0xdc>)
 8004a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000f00 	.word	0x20000f00
 8004a50:	20000a2c 	.word	0x20000a2c
 8004a54:	20000f0c 	.word	0x20000f0c
 8004a58:	20000f1c 	.word	0x20000f1c
 8004a5c:	20000f08 	.word	0x20000f08
 8004a60:	20000a30 	.word	0x20000a30
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a7a:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <vTaskDelay+0x64>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <vTaskDelay+0x32>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60bb      	str	r3, [r7, #8]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a9a:	f000 f88b 	bl	8004bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fd09 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004aa6:	f000 f893 	bl	8004bd0 <xTaskResumeAll>
 8004aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <vTaskDelay+0x68>)
 8004ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000f28 	.word	0x20000f28
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ae2:	463a      	mov	r2, r7
 8004ae4:	1d39      	adds	r1, r7, #4
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f81c 	bl	8003b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	9202      	str	r2, [sp, #8]
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	460a      	mov	r2, r1
 8004b02:	4924      	ldr	r1, [pc, #144]	@ (8004b94 <vTaskStartScheduler+0xc0>)
 8004b04:	4824      	ldr	r0, [pc, #144]	@ (8004b98 <vTaskStartScheduler+0xc4>)
 8004b06:	f7ff fdf1 	bl	80046ec <xTaskCreateStatic>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <vTaskStartScheduler+0xc8>)
 8004b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b10:	4b22      	ldr	r3, [pc, #136]	@ (8004b9c <vTaskStartScheduler+0xc8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e001      	b.n	8004b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b28:	f000 fd1a 	bl	8005560 <xTimerCreateTimerTask>
 8004b2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d11b      	bne.n	8004b6c <vTaskStartScheduler+0x98>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	613b      	str	r3, [r7, #16]
}
 8004b46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b48:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <vTaskStartScheduler+0xcc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3354      	adds	r3, #84	@ 0x54
 8004b4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ba4 <vTaskStartScheduler+0xd0>)
 8004b50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b52:	4b15      	ldr	r3, [pc, #84]	@ (8004ba8 <vTaskStartScheduler+0xd4>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b5a:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <vTaskStartScheduler+0xd8>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <vTaskStartScheduler+0xdc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b66:	f001 f8e3 	bl	8005d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b6a:	e00f      	b.n	8004b8c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b72:	d10b      	bne.n	8004b8c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <vTaskStartScheduler+0xb4>
}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	0800669c 	.word	0x0800669c
 8004b98:	080051e5 	.word	0x080051e5
 8004b9c:	20000f24 	.word	0x20000f24
 8004ba0:	20000a2c 	.word	0x20000a2c
 8004ba4:	20000010 	.word	0x20000010
 8004ba8:	20000f20 	.word	0x20000f20
 8004bac:	20000f0c 	.word	0x20000f0c
 8004bb0:	20000f04 	.word	0x20000f04

08004bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <vTaskSuspendAll+0x18>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	4a03      	ldr	r2, [pc, #12]	@ (8004bcc <vTaskSuspendAll+0x18>)
 8004bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bc2:	bf00      	nop
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000f28 	.word	0x20000f28

08004bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bde:	4b42      	ldr	r3, [pc, #264]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <xTaskResumeAll+0x2e>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	603b      	str	r3, [r7, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bfe:	f001 f93b 	bl	8005e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c02:	4b39      	ldr	r3, [pc, #228]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4a37      	ldr	r2, [pc, #220]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <xTaskResumeAll+0x118>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d162      	bne.n	8004cda <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c14:	4b35      	ldr	r3, [pc, #212]	@ (8004cec <xTaskResumeAll+0x11c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05e      	beq.n	8004cda <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c1c:	e02f      	b.n	8004c7e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c1e:	4b34      	ldr	r3, [pc, #208]	@ (8004cf0 <xTaskResumeAll+0x120>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f83a 	bl	8003ca4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff f835 	bl	8003ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf4 <xTaskResumeAll+0x124>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d903      	bls.n	8004c4e <xTaskResumeAll+0x7e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf4 <xTaskResumeAll+0x124>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4a27      	ldr	r2, [pc, #156]	@ (8004cf8 <xTaskResumeAll+0x128>)
 8004c5c:	441a      	add	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe ffc0 	bl	8003bea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	4b23      	ldr	r3, [pc, #140]	@ (8004cfc <xTaskResumeAll+0x12c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d302      	bcc.n	8004c7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004c78:	4b21      	ldr	r3, [pc, #132]	@ (8004d00 <xTaskResumeAll+0x130>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <xTaskResumeAll+0x120>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1cb      	bne.n	8004c1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c8c:	f000 fb66 	bl	800535c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c90:	4b1c      	ldr	r3, [pc, #112]	@ (8004d04 <xTaskResumeAll+0x134>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c9c:	f000 f846 	bl	8004d2c <xTaskIncrementTick>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004ca6:	4b16      	ldr	r3, [pc, #88]	@ (8004d00 <xTaskResumeAll+0x130>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f1      	bne.n	8004c9c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <xTaskResumeAll+0x134>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <xTaskResumeAll+0x130>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <xTaskResumeAll+0x138>)
 8004ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cda:	f001 f8ff 	bl	8005edc <vPortExitCritical>

	return xAlreadyYielded;
 8004cde:	68bb      	ldr	r3, [r7, #8]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000f28 	.word	0x20000f28
 8004cec:	20000f00 	.word	0x20000f00
 8004cf0:	20000ec0 	.word	0x20000ec0
 8004cf4:	20000f08 	.word	0x20000f08
 8004cf8:	20000a30 	.word	0x20000a30
 8004cfc:	20000a2c 	.word	0x20000a2c
 8004d00:	20000f14 	.word	0x20000f14
 8004d04:	20000f10 	.word	0x20000f10
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d12:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <xTaskGetTickCount+0x1c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d18:	687b      	ldr	r3, [r7, #4]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000f04 	.word	0x20000f04

08004d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d36:	4b4f      	ldr	r3, [pc, #316]	@ (8004e74 <xTaskIncrementTick+0x148>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 8090 	bne.w	8004e60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d40:	4b4d      	ldr	r3, [pc, #308]	@ (8004e78 <xTaskIncrementTick+0x14c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d48:	4a4b      	ldr	r2, [pc, #300]	@ (8004e78 <xTaskIncrementTick+0x14c>)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d121      	bne.n	8004d98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d54:	4b49      	ldr	r3, [pc, #292]	@ (8004e7c <xTaskIncrementTick+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	603b      	str	r3, [r7, #0]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <xTaskIncrementTick+0x46>
 8004d76:	4b41      	ldr	r3, [pc, #260]	@ (8004e7c <xTaskIncrementTick+0x150>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	4b40      	ldr	r3, [pc, #256]	@ (8004e80 <xTaskIncrementTick+0x154>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a3e      	ldr	r2, [pc, #248]	@ (8004e7c <xTaskIncrementTick+0x150>)
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4a3e      	ldr	r2, [pc, #248]	@ (8004e80 <xTaskIncrementTick+0x154>)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <xTaskIncrementTick+0x158>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a3c      	ldr	r2, [pc, #240]	@ (8004e84 <xTaskIncrementTick+0x158>)
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	f000 fae2 	bl	800535c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d98:	4b3b      	ldr	r3, [pc, #236]	@ (8004e88 <xTaskIncrementTick+0x15c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d349      	bcc.n	8004e36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004da2:	4b36      	ldr	r3, [pc, #216]	@ (8004e7c <xTaskIncrementTick+0x150>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dac:	4b36      	ldr	r3, [pc, #216]	@ (8004e88 <xTaskIncrementTick+0x15c>)
 8004dae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004db2:	601a      	str	r2, [r3, #0]
					break;
 8004db4:	e03f      	b.n	8004e36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db6:	4b31      	ldr	r3, [pc, #196]	@ (8004e7c <xTaskIncrementTick+0x150>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d203      	bcs.n	8004dd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dce:	4a2e      	ldr	r2, [pc, #184]	@ (8004e88 <xTaskIncrementTick+0x15c>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dd4:	e02f      	b.n	8004e36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe ff62 	bl	8003ca4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3318      	adds	r3, #24
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe ff59 	bl	8003ca4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df6:	4b25      	ldr	r3, [pc, #148]	@ (8004e8c <xTaskIncrementTick+0x160>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d903      	bls.n	8004e06 <xTaskIncrementTick+0xda>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a22      	ldr	r2, [pc, #136]	@ (8004e8c <xTaskIncrementTick+0x160>)
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4a1f      	ldr	r2, [pc, #124]	@ (8004e90 <xTaskIncrementTick+0x164>)
 8004e14:	441a      	add	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f7fe fee4 	bl	8003bea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e26:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <xTaskIncrementTick+0x168>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3b8      	bcc.n	8004da2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e34:	e7b5      	b.n	8004da2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e36:	4b17      	ldr	r3, [pc, #92]	@ (8004e94 <xTaskIncrementTick+0x168>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3c:	4914      	ldr	r1, [pc, #80]	@ (8004e90 <xTaskIncrementTick+0x164>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d901      	bls.n	8004e52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e52:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <xTaskIncrementTick+0x16c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e004      	b.n	8004e6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <xTaskIncrementTick+0x170>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	4a0d      	ldr	r2, [pc, #52]	@ (8004e9c <xTaskIncrementTick+0x170>)
 8004e68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e6a:	697b      	ldr	r3, [r7, #20]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000f28 	.word	0x20000f28
 8004e78:	20000f04 	.word	0x20000f04
 8004e7c:	20000eb8 	.word	0x20000eb8
 8004e80:	20000ebc 	.word	0x20000ebc
 8004e84:	20000f18 	.word	0x20000f18
 8004e88:	20000f20 	.word	0x20000f20
 8004e8c:	20000f08 	.word	0x20000f08
 8004e90:	20000a30 	.word	0x20000a30
 8004e94:	20000a2c 	.word	0x20000a2c
 8004e98:	20000f14 	.word	0x20000f14
 8004e9c:	20000f10 	.word	0x20000f10

08004ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <vTaskSwitchContext+0xb4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eae:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <vTaskSwitchContext+0xb8>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004eb4:	e047      	b.n	8004f46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004eb6:	4b28      	ldr	r3, [pc, #160]	@ (8004f58 <vTaskSwitchContext+0xb8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ebc:	4b27      	ldr	r3, [pc, #156]	@ (8004f5c <vTaskSwitchContext+0xbc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e011      	b.n	8004ee8 <vTaskSwitchContext+0x48>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	e7fd      	b.n	8004ede <vTaskSwitchContext+0x3e>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	491d      	ldr	r1, [pc, #116]	@ (8004f60 <vTaskSwitchContext+0xc0>)
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0e3      	beq.n	8004ec4 <vTaskSwitchContext+0x24>
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4a16      	ldr	r2, [pc, #88]	@ (8004f60 <vTaskSwitchContext+0xc0>)
 8004f08:	4413      	add	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d104      	bne.n	8004f2c <vTaskSwitchContext+0x8c>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <vTaskSwitchContext+0xc4>)
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <vTaskSwitchContext+0xbc>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <vTaskSwitchContext+0xc4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3354      	adds	r3, #84	@ 0x54
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <vTaskSwitchContext+0xc8>)
 8004f44:	6013      	str	r3, [r2, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000f28 	.word	0x20000f28
 8004f58:	20000f14 	.word	0x20000f14
 8004f5c:	20000f08 	.word	0x20000f08
 8004f60:	20000a30 	.word	0x20000a30
 8004f64:	20000a2c 	.word	0x20000a2c
 8004f68:	20000010 	.word	0x20000010

08004f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60fb      	str	r3, [r7, #12]
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f94:	4b07      	ldr	r3, [pc, #28]	@ (8004fb4 <vTaskPlaceOnEventList+0x48>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3318      	adds	r3, #24
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fe fe48 	bl	8003c32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	f000 fa87 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000a2c 	.word	0x20000a2c

08004fb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	617b      	str	r3, [r7, #20]
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	e7fd      	b.n	8004fde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <vTaskPlaceOnEventListRestricted+0x54>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	4619      	mov	r1, r3
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7fe fdfd 	bl	8003bea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ffa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	68b8      	ldr	r0, [r7, #8]
 8005000:	f000 fa5a 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
	}
 8005004:	bf00      	nop
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000a2c 	.word	0x20000a2c

08005010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10b      	bne.n	800503e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60fb      	str	r3, [r7, #12]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3318      	adds	r3, #24
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fe2e 	bl	8003ca4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005048:	4b1d      	ldr	r3, [pc, #116]	@ (80050c0 <xTaskRemoveFromEventList+0xb0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11d      	bne.n	800508c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3304      	adds	r3, #4
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe fe25 	bl	8003ca4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505e:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <xTaskRemoveFromEventList+0xb4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d903      	bls.n	800506e <xTaskRemoveFromEventList+0x5e>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <xTaskRemoveFromEventList+0xb4>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4a13      	ldr	r2, [pc, #76]	@ (80050c8 <xTaskRemoveFromEventList+0xb8>)
 800507c:	441a      	add	r2, r3
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fe fdb0 	bl	8003bea <vListInsertEnd>
 800508a:	e005      	b.n	8005098 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	3318      	adds	r3, #24
 8005090:	4619      	mov	r1, r3
 8005092:	480e      	ldr	r0, [pc, #56]	@ (80050cc <xTaskRemoveFromEventList+0xbc>)
 8005094:	f7fe fda9 	bl	8003bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509c:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <xTaskRemoveFromEventList+0xc0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d905      	bls.n	80050b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050aa:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <xTaskRemoveFromEventList+0xc4>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e001      	b.n	80050b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050b6:	697b      	ldr	r3, [r7, #20]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000f28 	.word	0x20000f28
 80050c4:	20000f08 	.word	0x20000f08
 80050c8:	20000a30 	.word	0x20000a30
 80050cc:	20000ec0 	.word	0x20000ec0
 80050d0:	20000a2c 	.word	0x20000a2c
 80050d4:	20000f14 	.word	0x20000f14

080050d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <vTaskInternalSetTimeOutState+0x24>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <vTaskInternalSetTimeOutState+0x28>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	605a      	str	r2, [r3, #4]
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000f18 	.word	0x20000f18
 8005100:	20000f04 	.word	0x20000f04

08005104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60fb      	str	r3, [r7, #12]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800514a:	f000 fe95 	bl	8005e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800514e:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <xTaskCheckForTimeOut+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005166:	d102      	bne.n	800516e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e023      	b.n	80051b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <xTaskCheckForTimeOut+0xc4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d007      	beq.n	800518a <xTaskCheckForTimeOut+0x86>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	429a      	cmp	r2, r3
 8005182:	d302      	bcc.n	800518a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e015      	b.n	80051b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	429a      	cmp	r2, r3
 8005192:	d20b      	bcs.n	80051ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff99 	bl	80050d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e004      	b.n	80051b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051b6:	f000 fe91 	bl	8005edc <vPortExitCritical>

	return xReturn;
 80051ba:	69fb      	ldr	r3, [r7, #28]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000f04 	.word	0x20000f04
 80051c8:	20000f18 	.word	0x20000f18

080051cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051d0:	4b03      	ldr	r3, [pc, #12]	@ (80051e0 <vTaskMissedYield+0x14>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20000f14 	.word	0x20000f14

080051e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051ec:	f000 f852 	bl	8005294 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <prvIdleTask+0x28>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d9f9      	bls.n	80051ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <prvIdleTask+0x2c>)
 80051fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005208:	e7f0      	b.n	80051ec <prvIdleTask+0x8>
 800520a:	bf00      	nop
 800520c:	20000a30 	.word	0x20000a30
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	e00c      	b.n	800523a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4a12      	ldr	r2, [pc, #72]	@ (8005274 <prvInitialiseTaskLists+0x60>)
 800522c:	4413      	add	r3, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fcae 	bl	8003b90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3301      	adds	r3, #1
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b37      	cmp	r3, #55	@ 0x37
 800523e:	d9ef      	bls.n	8005220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005240:	480d      	ldr	r0, [pc, #52]	@ (8005278 <prvInitialiseTaskLists+0x64>)
 8005242:	f7fe fca5 	bl	8003b90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005246:	480d      	ldr	r0, [pc, #52]	@ (800527c <prvInitialiseTaskLists+0x68>)
 8005248:	f7fe fca2 	bl	8003b90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800524c:	480c      	ldr	r0, [pc, #48]	@ (8005280 <prvInitialiseTaskLists+0x6c>)
 800524e:	f7fe fc9f 	bl	8003b90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005252:	480c      	ldr	r0, [pc, #48]	@ (8005284 <prvInitialiseTaskLists+0x70>)
 8005254:	f7fe fc9c 	bl	8003b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005258:	480b      	ldr	r0, [pc, #44]	@ (8005288 <prvInitialiseTaskLists+0x74>)
 800525a:	f7fe fc99 	bl	8003b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800525e:	4b0b      	ldr	r3, [pc, #44]	@ (800528c <prvInitialiseTaskLists+0x78>)
 8005260:	4a05      	ldr	r2, [pc, #20]	@ (8005278 <prvInitialiseTaskLists+0x64>)
 8005262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005264:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <prvInitialiseTaskLists+0x7c>)
 8005266:	4a05      	ldr	r2, [pc, #20]	@ (800527c <prvInitialiseTaskLists+0x68>)
 8005268:	601a      	str	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000a30 	.word	0x20000a30
 8005278:	20000e90 	.word	0x20000e90
 800527c:	20000ea4 	.word	0x20000ea4
 8005280:	20000ec0 	.word	0x20000ec0
 8005284:	20000ed4 	.word	0x20000ed4
 8005288:	20000eec 	.word	0x20000eec
 800528c:	20000eb8 	.word	0x20000eb8
 8005290:	20000ebc 	.word	0x20000ebc

08005294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800529a:	e019      	b.n	80052d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800529c:	f000 fdec 	bl	8005e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <prvCheckTasksWaitingTermination+0x50>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fe fcf9 	bl	8003ca4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052b2:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <prvCheckTasksWaitingTermination+0x54>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	4a0b      	ldr	r2, [pc, #44]	@ (80052e8 <prvCheckTasksWaitingTermination+0x54>)
 80052ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <prvCheckTasksWaitingTermination+0x58>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	4a0a      	ldr	r2, [pc, #40]	@ (80052ec <prvCheckTasksWaitingTermination+0x58>)
 80052c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052c6:	f000 fe09 	bl	8005edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f810 	bl	80052f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <prvCheckTasksWaitingTermination+0x58>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e1      	bne.n	800529c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000ed4 	.word	0x20000ed4
 80052e8:	20000f00 	.word	0x20000f00
 80052ec:	20000ee8 	.word	0x20000ee8

080052f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3354      	adds	r3, #84	@ 0x54
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f8f9 	bl	80064f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	4618      	mov	r0, r3
 8005312:	f000 ffa1 	bl	8006258 <vPortFree>
				vPortFree( pxTCB );
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 ff9e 	bl	8006258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800531c:	e019      	b.n	8005352 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005324:	2b01      	cmp	r3, #1
 8005326:	d103      	bne.n	8005330 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 ff95 	bl	8006258 <vPortFree>
	}
 800532e:	e010      	b.n	8005352 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005336:	2b02      	cmp	r3, #2
 8005338:	d00b      	beq.n	8005352 <prvDeleteTCB+0x62>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60fb      	str	r3, [r7, #12]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <prvDeleteTCB+0x5e>
	}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <prvResetNextTaskUnblockTime+0x38>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <prvResetNextTaskUnblockTime+0x3c>)
 800536e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005374:	e008      	b.n	8005388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005376:	4b07      	ldr	r3, [pc, #28]	@ (8005394 <prvResetNextTaskUnblockTime+0x38>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4a04      	ldr	r2, [pc, #16]	@ (8005398 <prvResetNextTaskUnblockTime+0x3c>)
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000eb8 	.word	0x20000eb8
 8005398:	20000f20 	.word	0x20000f20

0800539c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <xTaskGetSchedulerState+0x34>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053aa:	2301      	movs	r3, #1
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	e008      	b.n	80053c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b0:	4b08      	ldr	r3, [pc, #32]	@ (80053d4 <xTaskGetSchedulerState+0x38>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053b8:	2302      	movs	r3, #2
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	e001      	b.n	80053c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053be:	2300      	movs	r3, #0
 80053c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053c2:	687b      	ldr	r3, [r7, #4]
	}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000f0c 	.word	0x20000f0c
 80053d4:	20000f28 	.word	0x20000f28

080053d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d058      	beq.n	80054a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053ee:	4b2f      	ldr	r3, [pc, #188]	@ (80054ac <xTaskPriorityDisinherit+0xd4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d00b      	beq.n	8005410 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60fb      	str	r3, [r7, #12]
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60bb      	str	r3, [r7, #8]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	429a      	cmp	r2, r3
 8005444:	d02c      	beq.n	80054a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544a:	2b00      	cmp	r3, #0
 800544c:	d128      	bne.n	80054a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3304      	adds	r3, #4
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fc26 	bl	8003ca4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <xTaskPriorityDisinherit+0xd8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d903      	bls.n	8005480 <xTaskPriorityDisinherit+0xa8>
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	4a0c      	ldr	r2, [pc, #48]	@ (80054b0 <xTaskPriorityDisinherit+0xd8>)
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4a09      	ldr	r2, [pc, #36]	@ (80054b4 <xTaskPriorityDisinherit+0xdc>)
 800548e:	441a      	add	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7fe fba7 	bl	8003bea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054a0:	697b      	ldr	r3, [r7, #20]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000a2c 	.word	0x20000a2c
 80054b0:	20000f08 	.word	0x20000f08
 80054b4:	20000a30 	.word	0x20000a30

080054b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054c2:	4b21      	ldr	r3, [pc, #132]	@ (8005548 <prvAddCurrentTaskToDelayedList+0x90>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c8:	4b20      	ldr	r3, [pc, #128]	@ (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fbe8 	bl	8003ca4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054da:	d10a      	bne.n	80054f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e2:	4b1a      	ldr	r3, [pc, #104]	@ (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4819      	ldr	r0, [pc, #100]	@ (8005550 <prvAddCurrentTaskToDelayedList+0x98>)
 80054ec:	f7fe fb7d 	bl	8003bea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054f0:	e026      	b.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054fa:	4b14      	ldr	r3, [pc, #80]	@ (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	429a      	cmp	r2, r3
 8005508:	d209      	bcs.n	800551e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800550a:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b0f      	ldr	r3, [pc, #60]	@ (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7fe fb8b 	bl	8003c32 <vListInsert>
}
 800551c:	e010      	b.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b0a      	ldr	r3, [pc, #40]	@ (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7fe fb81 	bl	8003c32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005530:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d202      	bcs.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800553a:	4a08      	ldr	r2, [pc, #32]	@ (800555c <prvAddCurrentTaskToDelayedList+0xa4>)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000f04 	.word	0x20000f04
 800554c:	20000a2c 	.word	0x20000a2c
 8005550:	20000eec 	.word	0x20000eec
 8005554:	20000ebc 	.word	0x20000ebc
 8005558:	20000eb8 	.word	0x20000eb8
 800555c:	20000f20 	.word	0x20000f20

08005560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	@ 0x28
 8005564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800556a:	f000 fb13 	bl	8005b94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800556e:	4b1d      	ldr	r3, [pc, #116]	@ (80055e4 <xTimerCreateTimerTask+0x84>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d021      	beq.n	80055ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800557e:	1d3a      	adds	r2, r7, #4
 8005580:	f107 0108 	add.w	r1, r7, #8
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fae7 	bl	8003b5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	9202      	str	r2, [sp, #8]
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	2302      	movs	r3, #2
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	460a      	mov	r2, r1
 80055a0:	4911      	ldr	r1, [pc, #68]	@ (80055e8 <xTimerCreateTimerTask+0x88>)
 80055a2:	4812      	ldr	r0, [pc, #72]	@ (80055ec <xTimerCreateTimerTask+0x8c>)
 80055a4:	f7ff f8a2 	bl	80046ec <xTaskCreateStatic>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4a11      	ldr	r2, [pc, #68]	@ (80055f0 <xTimerCreateTimerTask+0x90>)
 80055ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055ae:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <xTimerCreateTimerTask+0x90>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055b6:	2301      	movs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	613b      	str	r3, [r7, #16]
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000f5c 	.word	0x20000f5c
 80055e8:	080066a4 	.word	0x080066a4
 80055ec:	0800572d 	.word	0x0800572d
 80055f0:	20000f60 	.word	0x20000f60

080055f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	@ 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xTimerGenericCommand+0x30>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	623b      	str	r3, [r7, #32]
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005624:	4b19      	ldr	r3, [pc, #100]	@ (800568c <xTimerGenericCommand+0x98>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02a      	beq.n	8005682 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b05      	cmp	r3, #5
 800563c:	dc18      	bgt.n	8005670 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800563e:	f7ff fead 	bl	800539c <xTaskGetSchedulerState>
 8005642:	4603      	mov	r3, r0
 8005644:	2b02      	cmp	r3, #2
 8005646:	d109      	bne.n	800565c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005648:	4b10      	ldr	r3, [pc, #64]	@ (800568c <xTimerGenericCommand+0x98>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	f107 0110 	add.w	r1, r7, #16
 8005650:	2300      	movs	r3, #0
 8005652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005654:	f7fe fc5a 	bl	8003f0c <xQueueGenericSend>
 8005658:	6278      	str	r0, [r7, #36]	@ 0x24
 800565a:	e012      	b.n	8005682 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800565c:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <xTimerGenericCommand+0x98>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	f107 0110 	add.w	r1, r7, #16
 8005664:	2300      	movs	r3, #0
 8005666:	2200      	movs	r2, #0
 8005668:	f7fe fc50 	bl	8003f0c <xQueueGenericSend>
 800566c:	6278      	str	r0, [r7, #36]	@ 0x24
 800566e:	e008      	b.n	8005682 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005670:	4b06      	ldr	r3, [pc, #24]	@ (800568c <xTimerGenericCommand+0x98>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	f107 0110 	add.w	r1, r7, #16
 8005678:	2300      	movs	r3, #0
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	f7fe fd48 	bl	8004110 <xQueueGenericSendFromISR>
 8005680:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005684:	4618      	mov	r0, r3
 8005686:	3728      	adds	r7, #40	@ 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000f5c 	.word	0x20000f5c

08005690 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569a:	4b23      	ldr	r3, [pc, #140]	@ (8005728 <prvProcessExpiredTimer+0x98>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fafb 	bl	8003ca4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d023      	beq.n	8005704 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	18d1      	adds	r1, r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	6978      	ldr	r0, [r7, #20]
 80056ca:	f000 f8d5 	bl	8005878 <prvInsertTimerInActiveList>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056d4:	2300      	movs	r3, #0
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2300      	movs	r3, #0
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	2100      	movs	r1, #0
 80056de:	6978      	ldr	r0, [r7, #20]
 80056e0:	f7ff ff88 	bl	80055f4 <xTimerGenericCommand>
 80056e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d114      	bne.n	8005716 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60fb      	str	r3, [r7, #12]
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	b2da      	uxtb	r2, r3
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	6978      	ldr	r0, [r7, #20]
 800571c:	4798      	blx	r3
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000f54 	.word	0x20000f54

0800572c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f859 	bl	80057f0 <prvGetNextExpireTime>
 800573e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4619      	mov	r1, r3
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f805 	bl	8005754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800574a:	f000 f8d7 	bl	80058fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800574e:	bf00      	nop
 8005750:	e7f0      	b.n	8005734 <prvTimerTask+0x8>
	...

08005754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800575e:	f7ff fa29 	bl	8004bb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f866 	bl	8005838 <prvSampleTimeNow>
 800576c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d130      	bne.n	80057d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <prvProcessTimerOrBlockTask+0x3c>
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	429a      	cmp	r2, r3
 8005780:	d806      	bhi.n	8005790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005782:	f7ff fa25 	bl	8004bd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff81 	bl	8005690 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800578e:	e024      	b.n	80057da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005796:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <prvProcessTimerOrBlockTask+0x90>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <prvProcessTimerOrBlockTask+0x50>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <prvProcessTimerOrBlockTask+0x52>
 80057a4:	2300      	movs	r3, #0
 80057a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <prvProcessTimerOrBlockTask+0x94>)
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fe ff65 	bl	8004684 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057ba:	f7ff fa09 	bl	8004bd0 <xTaskResumeAll>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057c4:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <prvProcessTimerOrBlockTask+0x98>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
}
 80057d4:	e001      	b.n	80057da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057d6:	f7ff f9fb 	bl	8004bd0 <xTaskResumeAll>
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000f58 	.word	0x20000f58
 80057e8:	20000f5c 	.word	0x20000f5c
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <prvGetNextExpireTime+0x44>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <prvGetNextExpireTime+0x16>
 8005802:	2201      	movs	r2, #1
 8005804:	e000      	b.n	8005808 <prvGetNextExpireTime+0x18>
 8005806:	2200      	movs	r2, #0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005814:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <prvGetNextExpireTime+0x44>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e001      	b.n	8005824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000f54 	.word	0x20000f54

08005838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005840:	f7ff fa64 	bl	8004d0c <xTaskGetTickCount>
 8005844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005846:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <prvSampleTimeNow+0x3c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	429a      	cmp	r2, r3
 800584e:	d205      	bcs.n	800585c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005850:	f000 f93a 	bl	8005ac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e002      	b.n	8005862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005862:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <prvSampleTimeNow+0x3c>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000f64 	.word	0x20000f64

08005878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d812      	bhi.n	80058c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	1ad2      	subs	r2, r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e01b      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <prvInsertTimerInActiveList+0x7c>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7fe f9b8 	bl	8003c32 <vListInsert>
 80058c2:	e012      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d206      	bcs.n	80058da <prvInsertTimerInActiveList+0x62>
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e007      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058da:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <prvInsertTimerInActiveList+0x80>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fe f9a4 	bl	8003c32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058ea:	697b      	ldr	r3, [r7, #20]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000f58 	.word	0x20000f58
 80058f8:	20000f54 	.word	0x20000f54

080058fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	@ 0x38
 8005900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005902:	e0ce      	b.n	8005aa2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da19      	bge.n	800593e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	3304      	adds	r3, #4
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61fb      	str	r3, [r7, #28]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005934:	6850      	ldr	r0, [r2, #4]
 8005936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005938:	6892      	ldr	r2, [r2, #8]
 800593a:	4611      	mov	r1, r2
 800593c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f2c0 80ae 	blt.w	8005aa2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe f9a4 	bl	8003ca4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800595c:	463b      	mov	r3, r7
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff ff6a 	bl	8005838 <prvSampleTimeNow>
 8005964:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b09      	cmp	r3, #9
 800596a:	f200 8097 	bhi.w	8005a9c <prvProcessReceivedCommands+0x1a0>
 800596e:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <prvProcessReceivedCommands+0x78>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	0800599d 	.word	0x0800599d
 8005978:	0800599d 	.word	0x0800599d
 800597c:	0800599d 	.word	0x0800599d
 8005980:	08005a13 	.word	0x08005a13
 8005984:	08005a27 	.word	0x08005a27
 8005988:	08005a73 	.word	0x08005a73
 800598c:	0800599d 	.word	0x0800599d
 8005990:	0800599d 	.word	0x0800599d
 8005994:	08005a13 	.word	0x08005a13
 8005998:	08005a27 	.word	0x08005a27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	18d1      	adds	r1, r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059bc:	f7ff ff5c 	bl	8005878 <prvInsertTimerInActiveList>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d06c      	beq.n	8005aa0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d061      	beq.n	8005aa0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	441a      	add	r2, r3
 80059e4:	2300      	movs	r3, #0
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ee:	f7ff fe01 	bl	80055f4 <xTimerGenericCommand>
 80059f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d152      	bne.n	8005aa0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	61bb      	str	r3, [r7, #24]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a24:	e03d      	b.n	8005aa2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	617b      	str	r3, [r7, #20]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	18d1      	adds	r1, r2, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a6c:	f7ff ff04 	bl	8005878 <prvInsertTimerInActiveList>
					break;
 8005a70:	e017      	b.n	8005aa2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d103      	bne.n	8005a88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a82:	f000 fbe9 	bl	8006258 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a86:	e00c      	b.n	8005aa2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a9a:	e002      	b.n	8005aa2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005a9c:	bf00      	nop
 8005a9e:	e000      	b.n	8005aa2 <prvProcessReceivedCommands+0x1a6>
					break;
 8005aa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aa2:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <prvProcessReceivedCommands+0x1c8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	1d39      	adds	r1, r7, #4
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fbce 	bl	800424c <xQueueReceive>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f47f af26 	bne.w	8005904 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	3730      	adds	r7, #48	@ 0x30
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000f5c 	.word	0x20000f5c

08005ac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ace:	e049      	b.n	8005b64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b8c <prvSwitchTimerLists+0xc4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ada:	4b2c      	ldr	r3, [pc, #176]	@ (8005b8c <prvSwitchTimerLists+0xc4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe f8db 	bl	8003ca4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02f      	beq.n	8005b64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d90e      	bls.n	8005b34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b22:	4b1a      	ldr	r3, [pc, #104]	@ (8005b8c <prvSwitchTimerLists+0xc4>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fe f880 	bl	8003c32 <vListInsert>
 8005b32:	e017      	b.n	8005b64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b34:	2300      	movs	r3, #0
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff fd58 	bl	80055f4 <xTimerGenericCommand>
 8005b44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	603b      	str	r3, [r7, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <prvSwitchTimerLists+0xc4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1b0      	bne.n	8005ad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <prvSwitchTimerLists+0xc4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b74:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <prvSwitchTimerLists+0xc8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a04      	ldr	r2, [pc, #16]	@ (8005b8c <prvSwitchTimerLists+0xc4>)
 8005b7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b7c:	4a04      	ldr	r2, [pc, #16]	@ (8005b90 <prvSwitchTimerLists+0xc8>)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	6013      	str	r3, [r2, #0]
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000f54 	.word	0x20000f54
 8005b90:	20000f58 	.word	0x20000f58

08005b94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b9a:	f000 f96d 	bl	8005e78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b9e:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <prvCheckForValidListAndQueue+0x60>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d120      	bne.n	8005be8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ba6:	4814      	ldr	r0, [pc, #80]	@ (8005bf8 <prvCheckForValidListAndQueue+0x64>)
 8005ba8:	f7fd fff2 	bl	8003b90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bac:	4813      	ldr	r0, [pc, #76]	@ (8005bfc <prvCheckForValidListAndQueue+0x68>)
 8005bae:	f7fd ffef 	bl	8003b90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005bb2:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <prvCheckForValidListAndQueue+0x6c>)
 8005bb4:	4a10      	ldr	r2, [pc, #64]	@ (8005bf8 <prvCheckForValidListAndQueue+0x64>)
 8005bb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bb8:	4b12      	ldr	r3, [pc, #72]	@ (8005c04 <prvCheckForValidListAndQueue+0x70>)
 8005bba:	4a10      	ldr	r2, [pc, #64]	@ (8005bfc <prvCheckForValidListAndQueue+0x68>)
 8005bbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4b11      	ldr	r3, [pc, #68]	@ (8005c08 <prvCheckForValidListAndQueue+0x74>)
 8005bc4:	4a11      	ldr	r2, [pc, #68]	@ (8005c0c <prvCheckForValidListAndQueue+0x78>)
 8005bc6:	2110      	movs	r1, #16
 8005bc8:	200a      	movs	r0, #10
 8005bca:	f7fe f8ff 	bl	8003dcc <xQueueGenericCreateStatic>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <prvCheckForValidListAndQueue+0x60>)
 8005bd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005bd4:	4b07      	ldr	r3, [pc, #28]	@ (8005bf4 <prvCheckForValidListAndQueue+0x60>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <prvCheckForValidListAndQueue+0x60>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	490b      	ldr	r1, [pc, #44]	@ (8005c10 <prvCheckForValidListAndQueue+0x7c>)
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fd24 	bl	8004630 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005be8:	f000 f978 	bl	8005edc <vPortExitCritical>
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000f5c 	.word	0x20000f5c
 8005bf8:	20000f2c 	.word	0x20000f2c
 8005bfc:	20000f40 	.word	0x20000f40
 8005c00:	20000f54 	.word	0x20000f54
 8005c04:	20000f58 	.word	0x20000f58
 8005c08:	20001008 	.word	0x20001008
 8005c0c:	20000f68 	.word	0x20000f68
 8005c10:	080066ac 	.word	0x080066ac

08005c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b04      	subs	r3, #4
 8005c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3b04      	subs	r3, #4
 8005c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0201 	bic.w	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c44:	4a0c      	ldr	r2, [pc, #48]	@ (8005c78 <pxPortInitialiseStack+0x64>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3b14      	subs	r3, #20
 8005c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f06f 0202 	mvn.w	r2, #2
 8005c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3b20      	subs	r3, #32
 8005c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	08005c7d 	.word	0x08005c7d

08005c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c86:	4b13      	ldr	r3, [pc, #76]	@ (8005cd4 <prvTaskExitError+0x58>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c8e:	d00b      	beq.n	8005ca8 <prvTaskExitError+0x2c>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <prvTaskExitError+0x28>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60bb      	str	r3, [r7, #8]
}
 8005cba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cbc:	bf00      	nop
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0fc      	beq.n	8005cbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c
	...

08005ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ce0:	4b07      	ldr	r3, [pc, #28]	@ (8005d00 <pxCurrentTCBConst2>)
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	6808      	ldr	r0, [r1, #0]
 8005ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cea:	f380 8809 	msr	PSP, r0
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8811 	msr	BASEPRI, r0
 8005cfa:	4770      	bx	lr
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst2>:
 8005d00:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d08:	4808      	ldr	r0, [pc, #32]	@ (8005d2c <prvPortStartFirstTask+0x24>)
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f380 8808 	msr	MSP, r0
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8814 	msr	CONTROL, r0
 8005d1a:	b662      	cpsie	i
 8005d1c:	b661      	cpsie	f
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	df00      	svc	0
 8005d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d2a:	bf00      	nop
 8005d2c:	e000ed08 	.word	0xe000ed08

08005d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d36:	4b47      	ldr	r3, [pc, #284]	@ (8005e54 <xPortStartScheduler+0x124>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a47      	ldr	r2, [pc, #284]	@ (8005e58 <xPortStartScheduler+0x128>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10b      	bne.n	8005d58 <xPortStartScheduler+0x28>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60fb      	str	r3, [r7, #12]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d58:	4b3e      	ldr	r3, [pc, #248]	@ (8005e54 <xPortStartScheduler+0x124>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e5c <xPortStartScheduler+0x12c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10b      	bne.n	8005d7a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	613b      	str	r3, [r7, #16]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d7a:	4b39      	ldr	r3, [pc, #228]	@ (8005e60 <xPortStartScheduler+0x130>)
 8005d7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	22ff      	movs	r2, #255	@ 0xff
 8005d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <xPortStartScheduler+0x134>)
 8005da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005da2:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005da4:	2207      	movs	r2, #7
 8005da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005da8:	e009      	b.n	8005dbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005daa:	4b2f      	ldr	r3, [pc, #188]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005db2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc6:	2b80      	cmp	r3, #128	@ 0x80
 8005dc8:	d0ef      	beq.n	8005daa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dca:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1c3 0307 	rsb	r3, r3, #7
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00b      	beq.n	8005dee <xPortStartScheduler+0xbe>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60bb      	str	r3, [r7, #8]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dee:	4b1e      	ldr	r3, [pc, #120]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005df8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e00:	4a19      	ldr	r2, [pc, #100]	@ (8005e68 <xPortStartScheduler+0x138>)
 8005e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e0c:	4b17      	ldr	r3, [pc, #92]	@ (8005e6c <xPortStartScheduler+0x13c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a16      	ldr	r2, [pc, #88]	@ (8005e6c <xPortStartScheduler+0x13c>)
 8005e12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e18:	4b14      	ldr	r3, [pc, #80]	@ (8005e6c <xPortStartScheduler+0x13c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a13      	ldr	r2, [pc, #76]	@ (8005e6c <xPortStartScheduler+0x13c>)
 8005e1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e24:	f000 f8da 	bl	8005fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e28:	4b11      	ldr	r3, [pc, #68]	@ (8005e70 <xPortStartScheduler+0x140>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e2e:	f000 f8f9 	bl	8006024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <xPortStartScheduler+0x144>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a0f      	ldr	r2, [pc, #60]	@ (8005e74 <xPortStartScheduler+0x144>)
 8005e38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e3e:	f7ff ff63 	bl	8005d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e42:	f7ff f82d 	bl	8004ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8005e46:	f7ff ff19 	bl	8005c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	e000ed00 	.word	0xe000ed00
 8005e58:	410fc271 	.word	0x410fc271
 8005e5c:	410fc270 	.word	0x410fc270
 8005e60:	e000e400 	.word	0xe000e400
 8005e64:	20001058 	.word	0x20001058
 8005e68:	2000105c 	.word	0x2000105c
 8005e6c:	e000ed20 	.word	0xe000ed20
 8005e70:	2000000c 	.word	0x2000000c
 8005e74:	e000ef34 	.word	0xe000ef34

08005e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	607b      	str	r3, [r7, #4]
}
 8005e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <vPortEnterCritical+0x5c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3301      	adds	r3, #1
 8005e98:	4a0e      	ldr	r2, [pc, #56]	@ (8005ed4 <vPortEnterCritical+0x5c>)
 8005e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <vPortEnterCritical+0x5c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d110      	bne.n	8005ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <vPortEnterCritical+0x60>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	603b      	str	r3, [r7, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <vPortEnterCritical+0x4a>
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ee2:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <vPortExitCritical+0x50>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <vPortExitCritical+0x26>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	607b      	str	r3, [r7, #4]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f02:	4b0a      	ldr	r3, [pc, #40]	@ (8005f2c <vPortExitCritical+0x50>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	4a08      	ldr	r2, [pc, #32]	@ (8005f2c <vPortExitCritical+0x50>)
 8005f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f0c:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <vPortExitCritical+0x50>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <vPortExitCritical+0x44>
 8005f14:	2300      	movs	r3, #0
 8005f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	2000000c 	.word	0x2000000c

08005f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f30:	f3ef 8009 	mrs	r0, PSP
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4b15      	ldr	r3, [pc, #84]	@ (8005f90 <pxCurrentTCBConst>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f01e 0f10 	tst.w	lr, #16
 8005f40:	bf08      	it	eq
 8005f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	6010      	str	r0, [r2, #0]
 8005f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f54:	f380 8811 	msr	BASEPRI, r0
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f7fe ff9e 	bl	8004ea0 <vTaskSwitchContext>
 8005f64:	f04f 0000 	mov.w	r0, #0
 8005f68:	f380 8811 	msr	BASEPRI, r0
 8005f6c:	bc09      	pop	{r0, r3}
 8005f6e:	6819      	ldr	r1, [r3, #0]
 8005f70:	6808      	ldr	r0, [r1, #0]
 8005f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f76:	f01e 0f10 	tst.w	lr, #16
 8005f7a:	bf08      	it	eq
 8005f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f80:	f380 8809 	msr	PSP, r0
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w

08005f90 <pxCurrentTCBConst>:
 8005f90:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop

08005f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	607b      	str	r3, [r7, #4]
}
 8005fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fb2:	f7fe febb 	bl	8004d2c <xTaskIncrementTick>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fbc:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <xPortSysTickHandler+0x40>)
 8005fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f383 8811 	msr	BASEPRI, r3
}
 8005fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <vPortSetupTimerInterrupt+0x34>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <vPortSetupTimerInterrupt+0x38>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <vPortSetupTimerInterrupt+0x3c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800601c <vPortSetupTimerInterrupt+0x40>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	4a09      	ldr	r2, [pc, #36]	@ (8006020 <vPortSetupTimerInterrupt+0x44>)
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ffe:	4b04      	ldr	r3, [pc, #16]	@ (8006010 <vPortSetupTimerInterrupt+0x34>)
 8006000:	2207      	movs	r2, #7
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	e000e010 	.word	0xe000e010
 8006014:	e000e018 	.word	0xe000e018
 8006018:	20000000 	.word	0x20000000
 800601c:	10624dd3 	.word	0x10624dd3
 8006020:	e000e014 	.word	0xe000e014

08006024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006034 <vPortEnableVFP+0x10>
 8006028:	6801      	ldr	r1, [r0, #0]
 800602a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800602e:	6001      	str	r1, [r0, #0]
 8006030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006032:	bf00      	nop
 8006034:	e000ed88 	.word	0xe000ed88

08006038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800603e:	f3ef 8305 	mrs	r3, IPSR
 8006042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b0f      	cmp	r3, #15
 8006048:	d915      	bls.n	8006076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800604a:	4a18      	ldr	r2, [pc, #96]	@ (80060ac <vPortValidateInterruptPriority+0x74>)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006054:	4b16      	ldr	r3, [pc, #88]	@ (80060b0 <vPortValidateInterruptPriority+0x78>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	7afa      	ldrb	r2, [r7, #11]
 800605a:	429a      	cmp	r2, r3
 800605c:	d20b      	bcs.n	8006076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	e7fd      	b.n	8006072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006076:	4b0f      	ldr	r3, [pc, #60]	@ (80060b4 <vPortValidateInterruptPriority+0x7c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800607e:	4b0e      	ldr	r3, [pc, #56]	@ (80060b8 <vPortValidateInterruptPriority+0x80>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d90b      	bls.n	800609e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	603b      	str	r3, [r7, #0]
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	e7fd      	b.n	800609a <vPortValidateInterruptPriority+0x62>
	}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	e000e3f0 	.word	0xe000e3f0
 80060b0:	20001058 	.word	0x20001058
 80060b4:	e000ed0c 	.word	0xe000ed0c
 80060b8:	2000105c 	.word	0x2000105c

080060bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	@ 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060c8:	f7fe fd74 	bl	8004bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006240 <pvPortMalloc+0x184>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060d4:	f000 f924 	bl	8006320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006244 <pvPortMalloc+0x188>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 8095 	bne.w	8006210 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01e      	beq.n	800612a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80060ec:	2208      	movs	r2, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d015      	beq.n	800612a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f023 0307 	bic.w	r3, r3, #7
 8006104:	3308      	adds	r3, #8
 8006106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <pvPortMalloc+0x6e>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	617b      	str	r3, [r7, #20]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d06f      	beq.n	8006210 <pvPortMalloc+0x154>
 8006130:	4b45      	ldr	r3, [pc, #276]	@ (8006248 <pvPortMalloc+0x18c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d86a      	bhi.n	8006210 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800613a:	4b44      	ldr	r3, [pc, #272]	@ (800624c <pvPortMalloc+0x190>)
 800613c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800613e:	4b43      	ldr	r3, [pc, #268]	@ (800624c <pvPortMalloc+0x190>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006144:	e004      	b.n	8006150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	429a      	cmp	r2, r3
 8006158:	d903      	bls.n	8006162 <pvPortMalloc+0xa6>
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f1      	bne.n	8006146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006162:	4b37      	ldr	r3, [pc, #220]	@ (8006240 <pvPortMalloc+0x184>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006168:	429a      	cmp	r2, r3
 800616a:	d051      	beq.n	8006210 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2208      	movs	r2, #8
 8006172:	4413      	add	r3, r2
 8006174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1ad2      	subs	r2, r2, r3
 8006186:	2308      	movs	r3, #8
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	429a      	cmp	r2, r3
 800618c:	d920      	bls.n	80061d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800618e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <pvPortMalloc+0xfc>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	613b      	str	r3, [r7, #16]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061ca:	69b8      	ldr	r0, [r7, #24]
 80061cc:	f000 f90a 	bl	80063e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006248 <pvPortMalloc+0x18c>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	4a1b      	ldr	r2, [pc, #108]	@ (8006248 <pvPortMalloc+0x18c>)
 80061dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061de:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <pvPortMalloc+0x18c>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006250 <pvPortMalloc+0x194>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d203      	bcs.n	80061f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061ea:	4b17      	ldr	r3, [pc, #92]	@ (8006248 <pvPortMalloc+0x18c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a18      	ldr	r2, [pc, #96]	@ (8006250 <pvPortMalloc+0x194>)
 80061f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b13      	ldr	r3, [pc, #76]	@ (8006244 <pvPortMalloc+0x188>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006206:	4b13      	ldr	r3, [pc, #76]	@ (8006254 <pvPortMalloc+0x198>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	4a11      	ldr	r2, [pc, #68]	@ (8006254 <pvPortMalloc+0x198>)
 800620e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006210:	f7fe fcde 	bl	8004bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <pvPortMalloc+0x17a>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60fb      	str	r3, [r7, #12]
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <pvPortMalloc+0x176>
	return pvReturn;
 8006236:	69fb      	ldr	r3, [r7, #28]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3728      	adds	r7, #40	@ 0x28
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20004c68 	.word	0x20004c68
 8006244:	20004c7c 	.word	0x20004c7c
 8006248:	20004c6c 	.word	0x20004c6c
 800624c:	20004c60 	.word	0x20004c60
 8006250:	20004c70 	.word	0x20004c70
 8006254:	20004c74 	.word	0x20004c74

08006258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04f      	beq.n	800630a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800626a:	2308      	movs	r3, #8
 800626c:	425b      	negs	r3, r3
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b25      	ldr	r3, [pc, #148]	@ (8006314 <vPortFree+0xbc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <vPortFree+0x46>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60fb      	str	r3, [r7, #12]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <vPortFree+0x66>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60bb      	str	r3, [r7, #8]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	4b14      	ldr	r3, [pc, #80]	@ (8006314 <vPortFree+0xbc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01e      	beq.n	800630a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11a      	bne.n	800630a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006314 <vPortFree+0xbc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062e4:	f7fe fc66 	bl	8004bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <vPortFree+0xc0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4413      	add	r3, r2
 80062f2:	4a09      	ldr	r2, [pc, #36]	@ (8006318 <vPortFree+0xc0>)
 80062f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062f6:	6938      	ldr	r0, [r7, #16]
 80062f8:	f000 f874 	bl	80063e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062fc:	4b07      	ldr	r3, [pc, #28]	@ (800631c <vPortFree+0xc4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3301      	adds	r3, #1
 8006302:	4a06      	ldr	r2, [pc, #24]	@ (800631c <vPortFree+0xc4>)
 8006304:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006306:	f7fe fc63 	bl	8004bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20004c7c 	.word	0x20004c7c
 8006318:	20004c6c 	.word	0x20004c6c
 800631c:	20004c78 	.word	0x20004c78

08006320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006326:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800632a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800632c:	4b27      	ldr	r3, [pc, #156]	@ (80063cc <prvHeapInit+0xac>)
 800632e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3307      	adds	r3, #7
 800633e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	4a1f      	ldr	r2, [pc, #124]	@ (80063cc <prvHeapInit+0xac>)
 8006350:	4413      	add	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006358:	4a1d      	ldr	r2, [pc, #116]	@ (80063d0 <prvHeapInit+0xb0>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800635e:	4b1c      	ldr	r3, [pc, #112]	@ (80063d0 <prvHeapInit+0xb0>)
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800636c:	2208      	movs	r2, #8
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a15      	ldr	r2, [pc, #84]	@ (80063d4 <prvHeapInit+0xb4>)
 8006380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006382:	4b14      	ldr	r3, [pc, #80]	@ (80063d4 <prvHeapInit+0xb4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800638a:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <prvHeapInit+0xb4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <prvHeapInit+0xb4>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a0a      	ldr	r2, [pc, #40]	@ (80063d8 <prvHeapInit+0xb8>)
 80063ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4a09      	ldr	r2, [pc, #36]	@ (80063dc <prvHeapInit+0xbc>)
 80063b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063b8:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <prvHeapInit+0xc0>)
 80063ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80063be:	601a      	str	r2, [r3, #0]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20001060 	.word	0x20001060
 80063d0:	20004c60 	.word	0x20004c60
 80063d4:	20004c68 	.word	0x20004c68
 80063d8:	20004c70 	.word	0x20004c70
 80063dc:	20004c6c 	.word	0x20004c6c
 80063e0:	20004c7c 	.word	0x20004c7c

080063e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063ec:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <prvInsertBlockIntoFreeList+0xac>)
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e002      	b.n	80063f8 <prvInsertBlockIntoFreeList+0x14>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d8f7      	bhi.n	80063f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d108      	bne.n	8006426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d118      	bne.n	800646c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b15      	ldr	r3, [pc, #84]	@ (8006494 <prvInsertBlockIntoFreeList+0xb0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d00d      	beq.n	8006462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e008      	b.n	8006474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006462:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <prvInsertBlockIntoFreeList+0xb0>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e003      	b.n	8006474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d002      	beq.n	8006482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006482:	bf00      	nop
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20004c60 	.word	0x20004c60
 8006494:	20004c68 	.word	0x20004c68

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <__libc_init_array>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4d0d      	ldr	r5, [pc, #52]	@ (80064e0 <__libc_init_array+0x38>)
 80064ac:	4c0d      	ldr	r4, [pc, #52]	@ (80064e4 <__libc_init_array+0x3c>)
 80064ae:	1b64      	subs	r4, r4, r5
 80064b0:	10a4      	asrs	r4, r4, #2
 80064b2:	2600      	movs	r6, #0
 80064b4:	42a6      	cmp	r6, r4
 80064b6:	d109      	bne.n	80064cc <__libc_init_array+0x24>
 80064b8:	4d0b      	ldr	r5, [pc, #44]	@ (80064e8 <__libc_init_array+0x40>)
 80064ba:	4c0c      	ldr	r4, [pc, #48]	@ (80064ec <__libc_init_array+0x44>)
 80064bc:	f000 f8dc 	bl	8006678 <_init>
 80064c0:	1b64      	subs	r4, r4, r5
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	2600      	movs	r6, #0
 80064c6:	42a6      	cmp	r6, r4
 80064c8:	d105      	bne.n	80064d6 <__libc_init_array+0x2e>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d0:	4798      	blx	r3
 80064d2:	3601      	adds	r6, #1
 80064d4:	e7ee      	b.n	80064b4 <__libc_init_array+0xc>
 80064d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064da:	4798      	blx	r3
 80064dc:	3601      	adds	r6, #1
 80064de:	e7f2      	b.n	80064c6 <__libc_init_array+0x1e>
 80064e0:	080066f8 	.word	0x080066f8
 80064e4:	080066f8 	.word	0x080066f8
 80064e8:	080066f8 	.word	0x080066f8
 80064ec:	080066fc 	.word	0x080066fc

080064f0 <__retarget_lock_acquire_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <__retarget_lock_release_recursive>:
 80064f2:	4770      	bx	lr

080064f4 <_reclaim_reent>:
 80064f4:	4b2d      	ldr	r3, [pc, #180]	@ (80065ac <_reclaim_reent+0xb8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4283      	cmp	r3, r0
 80064fa:	b570      	push	{r4, r5, r6, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	d053      	beq.n	80065a8 <_reclaim_reent+0xb4>
 8006500:	69c3      	ldr	r3, [r0, #28]
 8006502:	b31b      	cbz	r3, 800654c <_reclaim_reent+0x58>
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	b163      	cbz	r3, 8006522 <_reclaim_reent+0x2e>
 8006508:	2500      	movs	r5, #0
 800650a:	69e3      	ldr	r3, [r4, #28]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	5959      	ldr	r1, [r3, r5]
 8006510:	b9b1      	cbnz	r1, 8006540 <_reclaim_reent+0x4c>
 8006512:	3504      	adds	r5, #4
 8006514:	2d80      	cmp	r5, #128	@ 0x80
 8006516:	d1f8      	bne.n	800650a <_reclaim_reent+0x16>
 8006518:	69e3      	ldr	r3, [r4, #28]
 800651a:	4620      	mov	r0, r4
 800651c:	68d9      	ldr	r1, [r3, #12]
 800651e:	f000 f855 	bl	80065cc <_free_r>
 8006522:	69e3      	ldr	r3, [r4, #28]
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	b111      	cbz	r1, 800652e <_reclaim_reent+0x3a>
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f84f 	bl	80065cc <_free_r>
 800652e:	69e3      	ldr	r3, [r4, #28]
 8006530:	689d      	ldr	r5, [r3, #8]
 8006532:	b15d      	cbz	r5, 800654c <_reclaim_reent+0x58>
 8006534:	4629      	mov	r1, r5
 8006536:	4620      	mov	r0, r4
 8006538:	682d      	ldr	r5, [r5, #0]
 800653a:	f000 f847 	bl	80065cc <_free_r>
 800653e:	e7f8      	b.n	8006532 <_reclaim_reent+0x3e>
 8006540:	680e      	ldr	r6, [r1, #0]
 8006542:	4620      	mov	r0, r4
 8006544:	f000 f842 	bl	80065cc <_free_r>
 8006548:	4631      	mov	r1, r6
 800654a:	e7e1      	b.n	8006510 <_reclaim_reent+0x1c>
 800654c:	6961      	ldr	r1, [r4, #20]
 800654e:	b111      	cbz	r1, 8006556 <_reclaim_reent+0x62>
 8006550:	4620      	mov	r0, r4
 8006552:	f000 f83b 	bl	80065cc <_free_r>
 8006556:	69e1      	ldr	r1, [r4, #28]
 8006558:	b111      	cbz	r1, 8006560 <_reclaim_reent+0x6c>
 800655a:	4620      	mov	r0, r4
 800655c:	f000 f836 	bl	80065cc <_free_r>
 8006560:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006562:	b111      	cbz	r1, 800656a <_reclaim_reent+0x76>
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f831 	bl	80065cc <_free_r>
 800656a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800656c:	b111      	cbz	r1, 8006574 <_reclaim_reent+0x80>
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f82c 	bl	80065cc <_free_r>
 8006574:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006576:	b111      	cbz	r1, 800657e <_reclaim_reent+0x8a>
 8006578:	4620      	mov	r0, r4
 800657a:	f000 f827 	bl	80065cc <_free_r>
 800657e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006580:	b111      	cbz	r1, 8006588 <_reclaim_reent+0x94>
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f822 	bl	80065cc <_free_r>
 8006588:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800658a:	b111      	cbz	r1, 8006592 <_reclaim_reent+0x9e>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 f81d 	bl	80065cc <_free_r>
 8006592:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006594:	b111      	cbz	r1, 800659c <_reclaim_reent+0xa8>
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f818 	bl	80065cc <_free_r>
 800659c:	6a23      	ldr	r3, [r4, #32]
 800659e:	b11b      	cbz	r3, 80065a8 <_reclaim_reent+0xb4>
 80065a0:	4620      	mov	r0, r4
 80065a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065a6:	4718      	bx	r3
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	bf00      	nop
 80065ac:	20000010 	.word	0x20000010

080065b0 <memcpy>:
 80065b0:	440a      	add	r2, r1
 80065b2:	4291      	cmp	r1, r2
 80065b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80065b8:	d100      	bne.n	80065bc <memcpy+0xc>
 80065ba:	4770      	bx	lr
 80065bc:	b510      	push	{r4, lr}
 80065be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c6:	4291      	cmp	r1, r2
 80065c8:	d1f9      	bne.n	80065be <memcpy+0xe>
 80065ca:	bd10      	pop	{r4, pc}

080065cc <_free_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d041      	beq.n	8006658 <_free_r+0x8c>
 80065d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d8:	1f0c      	subs	r4, r1, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfb8      	it	lt
 80065de:	18e4      	addlt	r4, r4, r3
 80065e0:	f000 f83e 	bl	8006660 <__malloc_lock>
 80065e4:	4a1d      	ldr	r2, [pc, #116]	@ (800665c <_free_r+0x90>)
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	b933      	cbnz	r3, 80065f8 <_free_r+0x2c>
 80065ea:	6063      	str	r3, [r4, #4]
 80065ec:	6014      	str	r4, [r2, #0]
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f4:	f000 b83a 	b.w	800666c <__malloc_unlock>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d908      	bls.n	800660e <_free_r+0x42>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	1821      	adds	r1, r4, r0
 8006600:	428b      	cmp	r3, r1
 8006602:	bf01      	itttt	eq
 8006604:	6819      	ldreq	r1, [r3, #0]
 8006606:	685b      	ldreq	r3, [r3, #4]
 8006608:	1809      	addeq	r1, r1, r0
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	e7ed      	b.n	80065ea <_free_r+0x1e>
 800660e:	461a      	mov	r2, r3
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b10b      	cbz	r3, 8006618 <_free_r+0x4c>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d9fa      	bls.n	800660e <_free_r+0x42>
 8006618:	6811      	ldr	r1, [r2, #0]
 800661a:	1850      	adds	r0, r2, r1
 800661c:	42a0      	cmp	r0, r4
 800661e:	d10b      	bne.n	8006638 <_free_r+0x6c>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	4401      	add	r1, r0
 8006624:	1850      	adds	r0, r2, r1
 8006626:	4283      	cmp	r3, r0
 8006628:	6011      	str	r1, [r2, #0]
 800662a:	d1e0      	bne.n	80065ee <_free_r+0x22>
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	6053      	str	r3, [r2, #4]
 8006632:	4408      	add	r0, r1
 8006634:	6010      	str	r0, [r2, #0]
 8006636:	e7da      	b.n	80065ee <_free_r+0x22>
 8006638:	d902      	bls.n	8006640 <_free_r+0x74>
 800663a:	230c      	movs	r3, #12
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	e7d6      	b.n	80065ee <_free_r+0x22>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	1821      	adds	r1, r4, r0
 8006644:	428b      	cmp	r3, r1
 8006646:	bf04      	itt	eq
 8006648:	6819      	ldreq	r1, [r3, #0]
 800664a:	685b      	ldreq	r3, [r3, #4]
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	bf04      	itt	eq
 8006650:	1809      	addeq	r1, r1, r0
 8006652:	6021      	streq	r1, [r4, #0]
 8006654:	6054      	str	r4, [r2, #4]
 8006656:	e7ca      	b.n	80065ee <_free_r+0x22>
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	20004dbc 	.word	0x20004dbc

08006660 <__malloc_lock>:
 8006660:	4801      	ldr	r0, [pc, #4]	@ (8006668 <__malloc_lock+0x8>)
 8006662:	f7ff bf45 	b.w	80064f0 <__retarget_lock_acquire_recursive>
 8006666:	bf00      	nop
 8006668:	20004db8 	.word	0x20004db8

0800666c <__malloc_unlock>:
 800666c:	4801      	ldr	r0, [pc, #4]	@ (8006674 <__malloc_unlock+0x8>)
 800666e:	f7ff bf40 	b.w	80064f2 <__retarget_lock_release_recursive>
 8006672:	bf00      	nop
 8006674:	20004db8 	.word	0x20004db8

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr
